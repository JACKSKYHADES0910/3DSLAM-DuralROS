// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/cloud/proto/map_builder_service.proto

#include "cartographer/cloud/proto/map_builder_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LocalSlamInsertionResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryNodePose_ConstantPoseData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryRemapping;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SubmapPose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TrajectoryNodePose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_SensorData;
}  // namespace protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto
namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubmapId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PoseGraph_LandmarkPose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PoseGraph_Constraint;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto
namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SerializationHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LocalSlamResultData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_SerializedData;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto
namespace protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SubmapQuery_Response;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto
namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_TrajectoryBuilderOptions;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto
namespace protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FixedFramePoseData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ImuData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LandmarkData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OdometryData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RangeData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TimedPointCloudData;
}  // namespace protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto
namespace protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Rigid3d;
}  // namespace protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto
namespace cartographer {
namespace cloud {
namespace proto {
class SensorIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorId>
      _instance;
} _SensorId_default_instance_;
class AddTrajectoryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTrajectoryRequest>
      _instance;
} _AddTrajectoryRequest_default_instance_;
class SensorMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorMetadata>
      _instance;
} _SensorMetadata_default_instance_;
class SensorDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorData>
      _instance;
  const ::cartographer::sensor::proto::OdometryData* odometry_data_;
  const ::cartographer::sensor::proto::ImuData* imu_data_;
  const ::cartographer::sensor::proto::TimedPointCloudData* timed_point_cloud_data_;
  const ::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data_;
  const ::cartographer::sensor::proto::LandmarkData* landmark_data_;
  const ::cartographer::mapping::proto::LocalSlamResultData* local_slam_result_data_;
} _SensorData_default_instance_;
class AddTrajectoryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTrajectoryResponse>
      _instance;
} _AddTrajectoryResponse_default_instance_;
class AddSensorDataBatchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddSensorDataBatchRequest>
      _instance;
} _AddSensorDataBatchRequest_default_instance_;
class AddOdometryDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddOdometryDataRequest>
      _instance;
} _AddOdometryDataRequest_default_instance_;
class AddImuDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddImuDataRequest>
      _instance;
} _AddImuDataRequest_default_instance_;
class AddRangefinderDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddRangefinderDataRequest>
      _instance;
} _AddRangefinderDataRequest_default_instance_;
class AddFixedFramePoseDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddFixedFramePoseDataRequest>
      _instance;
} _AddFixedFramePoseDataRequest_default_instance_;
class AddLandmarkDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddLandmarkDataRequest>
      _instance;
} _AddLandmarkDataRequest_default_instance_;
class FinishTrajectoryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishTrajectoryRequest>
      _instance;
} _FinishTrajectoryRequest_default_instance_;
class DeleteTrajectoryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteTrajectoryRequest>
      _instance;
} _DeleteTrajectoryRequest_default_instance_;
class ReceiveLocalSlamResultsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReceiveLocalSlamResultsRequest>
      _instance;
} _ReceiveLocalSlamResultsRequest_default_instance_;
class LocalSlamInsertionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalSlamInsertionResult>
      _instance;
} _LocalSlamInsertionResult_default_instance_;
class ReceiveLocalSlamResultsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReceiveLocalSlamResultsResponse>
      _instance;
} _ReceiveLocalSlamResultsResponse_default_instance_;
class ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse>
      _instance;
} _ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_default_instance_;
class ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse>
      _instance;
} _ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_default_instance_;
class ReceiveGlobalSlamOptimizationsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReceiveGlobalSlamOptimizationsResponse>
      _instance;
} _ReceiveGlobalSlamOptimizationsResponse_default_instance_;
class GetSubmapRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSubmapRequest>
      _instance;
} _GetSubmapRequest_default_instance_;
class LoadStateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoadStateRequest>
      _instance;
  const ::cartographer::mapping::proto::SerializedData* serialized_data_;
  const ::cartographer::mapping::proto::SerializationHeader* serialization_header_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
} _LoadStateRequest_default_instance_;
class TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse>
      _instance;
} _TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_default_instance_;
class TrajectoryRemappingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryRemapping>
      _instance;
} _TrajectoryRemapping_default_instance_;
class LoadStateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoadStateResponse>
      _instance;
} _LoadStateResponse_default_instance_;
class LoadStateFromFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoadStateFromFileRequest>
      _instance;
} _LoadStateFromFileRequest_default_instance_;
class LoadStateFromFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoadStateFromFileResponse>
      _instance;
} _LoadStateFromFileResponse_default_instance_;
class GetSubmapResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSubmapResponse>
      _instance;
} _GetSubmapResponse_default_instance_;
class TrajectoryNodePose_ConstantPoseDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryNodePose_ConstantPoseData>
      _instance;
} _TrajectoryNodePose_ConstantPoseData_default_instance_;
class TrajectoryNodePoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryNodePose>
      _instance;
} _TrajectoryNodePose_default_instance_;
class GetTrajectoryNodePosesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTrajectoryNodePosesResponse>
      _instance;
} _GetTrajectoryNodePosesResponse_default_instance_;
class GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse>
      _instance;
} _GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_default_instance_;
class GetTrajectoryStatesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTrajectoryStatesResponse>
      _instance;
} _GetTrajectoryStatesResponse_default_instance_;
class GetLandmarkPosesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetLandmarkPosesResponse>
      _instance;
} _GetLandmarkPosesResponse_default_instance_;
class SetLandmarkPoseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetLandmarkPoseRequest>
      _instance;
} _SetLandmarkPoseRequest_default_instance_;
class SubmapPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmapPose>
      _instance;
} _SubmapPose_default_instance_;
class GetAllSubmapPosesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAllSubmapPosesResponse>
      _instance;
} _GetAllSubmapPosesResponse_default_instance_;
class GetLocalToGlobalTransformRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetLocalToGlobalTransformRequest>
      _instance;
} _GetLocalToGlobalTransformRequest_default_instance_;
class GetLocalToGlobalTransformResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetLocalToGlobalTransformResponse>
      _instance;
} _GetLocalToGlobalTransformResponse_default_instance_;
class GetConstraintsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetConstraintsResponse>
      _instance;
} _GetConstraintsResponse_default_instance_;
class WriteStateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteStateResponse>
      _instance;
  const ::cartographer::mapping::proto::SerializationHeader* header_;
  const ::cartographer::mapping::proto::SerializedData* serialized_data_;
} _WriteStateResponse_default_instance_;
class WriteStateToFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteStateToFileRequest>
      _instance;
} _WriteStateToFileRequest_default_instance_;
class WriteStateToFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteStateToFileResponse>
      _instance;
} _WriteStateToFileResponse_default_instance_;
class IsTrajectoryFinishedRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IsTrajectoryFinishedRequest>
      _instance;
} _IsTrajectoryFinishedRequest_default_instance_;
class IsTrajectoryFinishedResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IsTrajectoryFinishedResponse>
      _instance;
} _IsTrajectoryFinishedResponse_default_instance_;
class IsTrajectoryFrozenRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IsTrajectoryFrozenRequest>
      _instance;
} _IsTrajectoryFrozenRequest_default_instance_;
class IsTrajectoryFrozenResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IsTrajectoryFrozenResponse>
      _instance;
} _IsTrajectoryFrozenResponse_default_instance_;
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
namespace protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto {
static void InitDefaultsSensorId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SensorId_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SensorId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SensorId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorId}, {}};

static void InitDefaultsAddTrajectoryRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddTrajectoryRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddTrajectoryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddTrajectoryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AddTrajectoryRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddTrajectoryRequest}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorId.base,
      &protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::scc_info_TrajectoryBuilderOptions.base,}};

static void InitDefaultsSensorMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SensorMetadata_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SensorMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SensorMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorMetadata}, {}};

static void InitDefaultsSensorData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SensorData_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SensorData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SensorData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_SensorData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsSensorData}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorMetadata.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_OdometryData.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_ImuData.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_TimedPointCloudData.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_FixedFramePoseData.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_LandmarkData.base,
      &protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::scc_info_LocalSlamResultData.base,}};

static void InitDefaultsAddTrajectoryResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddTrajectoryResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddTrajectoryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddTrajectoryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddTrajectoryResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddTrajectoryResponse}, {}};

static void InitDefaultsAddSensorDataBatchRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddSensorDataBatchRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddSensorDataBatchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddSensorDataBatchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddSensorDataBatchRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddSensorDataBatchRequest}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorData.base,}};

static void InitDefaultsAddOdometryDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddOdometryDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddOdometryDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddOdometryDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AddOdometryDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddOdometryDataRequest}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorMetadata.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_OdometryData.base,}};

static void InitDefaultsAddImuDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddImuDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddImuDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddImuDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AddImuDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddImuDataRequest}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorMetadata.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_ImuData.base,}};

static void InitDefaultsAddRangefinderDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddRangefinderDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddRangefinderDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AddRangefinderDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddRangefinderDataRequest}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorMetadata.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_TimedPointCloudData.base,}};

static void InitDefaultsAddFixedFramePoseDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddFixedFramePoseDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddFixedFramePoseDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddFixedFramePoseDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AddFixedFramePoseDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddFixedFramePoseDataRequest}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorMetadata.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_FixedFramePoseData.base,}};

static void InitDefaultsAddLandmarkDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddLandmarkDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddLandmarkDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddLandmarkDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AddLandmarkDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddLandmarkDataRequest}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorMetadata.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_LandmarkData.base,}};

static void InitDefaultsFinishTrajectoryRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_FinishTrajectoryRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::FinishTrajectoryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::FinishTrajectoryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FinishTrajectoryRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinishTrajectoryRequest}, {}};

static void InitDefaultsDeleteTrajectoryRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_DeleteTrajectoryRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::DeleteTrajectoryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::DeleteTrajectoryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteTrajectoryRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteTrajectoryRequest}, {}};

static void InitDefaultsReceiveLocalSlamResultsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_ReceiveLocalSlamResultsRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReceiveLocalSlamResultsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReceiveLocalSlamResultsRequest}, {}};

static void InitDefaultsLocalSlamInsertionResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_LocalSlamInsertionResult_default_instance_;
    new (ptr) ::cartographer::cloud::proto::LocalSlamInsertionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::LocalSlamInsertionResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LocalSlamInsertionResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLocalSlamInsertionResult}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::scc_info_NodeId.base,}};

static void InitDefaultsReceiveLocalSlamResultsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_ReceiveLocalSlamResultsResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ReceiveLocalSlamResultsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReceiveLocalSlamResultsResponse}, {
      &protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::scc_info_Rigid3d.base,
      &protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::scc_info_RangeData.base,
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LocalSlamInsertionResult.base,}};

static void InitDefaultsReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse();
  }
  ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::scc_info_NodeId.base,}};

static void InitDefaultsReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse();
  }
  ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::scc_info_SubmapId.base,}};

static void InitDefaultsReceiveGlobalSlamOptimizationsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReceiveGlobalSlamOptimizationsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReceiveGlobalSlamOptimizationsResponse}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse.base,
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse.base,}};

static void InitDefaultsGetSubmapRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetSubmapRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetSubmapRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetSubmapRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetSubmapRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetSubmapRequest}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::scc_info_SubmapId.base,}};

static void InitDefaultsLoadStateRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_LoadStateRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::LoadStateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::LoadStateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LoadStateRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLoadStateRequest}, {
      &protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::scc_info_SerializedData.base,
      &protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::scc_info_SerializationHeader.base,}};

static void InitDefaultsTrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse();
  }
  ::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse}, {}};

static void InitDefaultsTrajectoryRemapping() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_TrajectoryRemapping_default_instance_;
    new (ptr) ::cartographer::cloud::proto::TrajectoryRemapping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::TrajectoryRemapping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryRemapping =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrajectoryRemapping}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse.base,}};

static void InitDefaultsLoadStateResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_LoadStateResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::LoadStateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::LoadStateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoadStateResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoadStateResponse}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryRemapping.base,}};

static void InitDefaultsLoadStateFromFileRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_LoadStateFromFileRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::LoadStateFromFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::LoadStateFromFileRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoadStateFromFileRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoadStateFromFileRequest}, {}};

static void InitDefaultsLoadStateFromFileResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_LoadStateFromFileResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::LoadStateFromFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::LoadStateFromFileResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoadStateFromFileResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoadStateFromFileResponse}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryRemapping.base,}};

static void InitDefaultsGetSubmapResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetSubmapResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetSubmapResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetSubmapResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetSubmapResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetSubmapResponse}, {
      &protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::scc_info_SubmapQuery_Response.base,}};

static void InitDefaultsTrajectoryNodePose_ConstantPoseData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_TrajectoryNodePose_ConstantPoseData_default_instance_;
    new (ptr) ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryNodePose_ConstantPoseData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrajectoryNodePose_ConstantPoseData}, {
      &protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::scc_info_Rigid3d.base,}};

static void InitDefaultsTrajectoryNodePose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_TrajectoryNodePose_default_instance_;
    new (ptr) ::cartographer::cloud::proto::TrajectoryNodePose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::TrajectoryNodePose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TrajectoryNodePose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTrajectoryNodePose}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::scc_info_NodeId.base,
      &protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::scc_info_Rigid3d.base,
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryNodePose_ConstantPoseData.base,}};

static void InitDefaultsGetTrajectoryNodePosesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetTrajectoryNodePosesResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetTrajectoryNodePosesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetTrajectoryNodePosesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetTrajectoryNodePosesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetTrajectoryNodePosesResponse}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryNodePose.base,}};

static void InitDefaultsGetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse();
  }
  ::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse}, {}};

static void InitDefaultsGetTrajectoryStatesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetTrajectoryStatesResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetTrajectoryStatesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetTrajectoryStatesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetTrajectoryStatesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetTrajectoryStatesResponse}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse.base,}};

static void InitDefaultsGetLandmarkPosesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetLandmarkPosesResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetLandmarkPosesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetLandmarkPosesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetLandmarkPosesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetLandmarkPosesResponse}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::scc_info_PoseGraph_LandmarkPose.base,}};

static void InitDefaultsSetLandmarkPoseRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SetLandmarkPoseRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SetLandmarkPoseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SetLandmarkPoseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetLandmarkPoseRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetLandmarkPoseRequest}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::scc_info_PoseGraph_LandmarkPose.base,}};

static void InitDefaultsSubmapPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SubmapPose_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SubmapPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SubmapPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SubmapPose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSubmapPose}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::scc_info_SubmapId.base,
      &protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::scc_info_Rigid3d.base,}};

static void InitDefaultsGetAllSubmapPosesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetAllSubmapPosesResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetAllSubmapPosesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetAllSubmapPosesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetAllSubmapPosesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetAllSubmapPosesResponse}, {
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SubmapPose.base,}};

static void InitDefaultsGetLocalToGlobalTransformRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetLocalToGlobalTransformRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetLocalToGlobalTransformRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetLocalToGlobalTransformRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetLocalToGlobalTransformRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetLocalToGlobalTransformRequest}, {}};

static void InitDefaultsGetLocalToGlobalTransformResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetLocalToGlobalTransformResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetLocalToGlobalTransformResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetLocalToGlobalTransformResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetLocalToGlobalTransformResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetLocalToGlobalTransformResponse}, {
      &protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::scc_info_Rigid3d.base,}};

static void InitDefaultsGetConstraintsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetConstraintsResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetConstraintsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetConstraintsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetConstraintsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetConstraintsResponse}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::scc_info_PoseGraph_Constraint.base,}};

static void InitDefaultsWriteStateResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_WriteStateResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::WriteStateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::WriteStateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WriteStateResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWriteStateResponse}, {
      &protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::scc_info_SerializationHeader.base,
      &protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::scc_info_SerializedData.base,}};

static void InitDefaultsWriteStateToFileRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_WriteStateToFileRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::WriteStateToFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::WriteStateToFileRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteStateToFileRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteStateToFileRequest}, {}};

static void InitDefaultsWriteStateToFileResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_WriteStateToFileResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::WriteStateToFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::WriteStateToFileResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteStateToFileResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteStateToFileResponse}, {}};

static void InitDefaultsIsTrajectoryFinishedRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_IsTrajectoryFinishedRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::IsTrajectoryFinishedRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::IsTrajectoryFinishedRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IsTrajectoryFinishedRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIsTrajectoryFinishedRequest}, {}};

static void InitDefaultsIsTrajectoryFinishedResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_IsTrajectoryFinishedResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::IsTrajectoryFinishedResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::IsTrajectoryFinishedResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IsTrajectoryFinishedResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIsTrajectoryFinishedResponse}, {}};

static void InitDefaultsIsTrajectoryFrozenRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_IsTrajectoryFrozenRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::IsTrajectoryFrozenRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::IsTrajectoryFrozenRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IsTrajectoryFrozenRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIsTrajectoryFrozenRequest}, {}};

static void InitDefaultsIsTrajectoryFrozenResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_IsTrajectoryFrozenResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::IsTrajectoryFrozenResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::IsTrajectoryFrozenResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IsTrajectoryFrozenResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIsTrajectoryFrozenResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SensorId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTrajectoryRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTrajectoryResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddSensorDataBatchRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddOdometryDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddImuDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddRangefinderDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddFixedFramePoseDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddLandmarkDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FinishTrajectoryRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteTrajectoryRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReceiveLocalSlamResultsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocalSlamInsertionResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReceiveLocalSlamResultsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReceiveGlobalSlamOptimizationsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSubmapRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoadStateRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryRemapping.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoadStateResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoadStateFromFileRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoadStateFromFileResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSubmapResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryNodePose_ConstantPoseData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryNodePose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTrajectoryNodePosesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTrajectoryStatesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetLandmarkPosesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetLandmarkPoseRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmapPose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAllSubmapPosesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetLocalToGlobalTransformRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetLocalToGlobalTransformResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetConstraintsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteStateResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteStateToFileRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteStateToFileResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IsTrajectoryFinishedRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IsTrajectoryFinishedResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IsTrajectoryFrozenRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IsTrajectoryFrozenResponse.base);
}

::google::protobuf::Metadata file_level_metadata[46];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorId, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorId, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryRequest, expected_sensor_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryRequest, trajectory_builder_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryRequest, client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorData, sensor_metadata_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, odometry_data_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, imu_data_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, timed_point_cloud_data_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, fixed_frame_pose_data_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, landmark_data_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, local_slam_result_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SensorData, sensor_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryResponse, trajectory_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddSensorDataBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddSensorDataBatchRequest, sensor_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddOdometryDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddOdometryDataRequest, sensor_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddOdometryDataRequest, odometry_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddImuDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddImuDataRequest, sensor_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddImuDataRequest, imu_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, sensor_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, timed_point_cloud_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddFixedFramePoseDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddFixedFramePoseDataRequest, sensor_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddFixedFramePoseDataRequest, fixed_frame_pose_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddLandmarkDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddLandmarkDataRequest, sensor_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::AddLandmarkDataRequest, landmark_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::FinishTrajectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::FinishTrajectoryRequest, trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::FinishTrajectoryRequest, client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::DeleteTrajectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::DeleteTrajectoryRequest, trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::DeleteTrajectoryRequest, client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest, trajectory_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LocalSlamInsertionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LocalSlamInsertionResult, node_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, local_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, range_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, insertion_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse, last_optimized_node_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse, last_optimized_submap_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetSubmapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetSubmapRequest, submap_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::cartographer::cloud::proto::LoadStateRequestDefaultTypeInternal, serialized_data_),
  offsetof(::cartographer::cloud::proto::LoadStateRequestDefaultTypeInternal, serialization_header_),
  offsetof(::cartographer::cloud::proto::LoadStateRequestDefaultTypeInternal, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateRequest, load_frozen_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateRequest, state_chunk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping, serialized_trajectories_to_trajectories_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateResponse, trajectory_remapping_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileRequest, file_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileRequest, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileRequest, load_frozen_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileResponse, trajectory_remapping_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetSubmapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetSubmapResponse, submap_query_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetSubmapResponse, error_msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData, local_pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose, global_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose, constant_pose_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryNodePosesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryNodePosesResponse, node_poses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse, trajectories_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetLandmarkPosesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetLandmarkPosesResponse, landmark_poses_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SetLandmarkPoseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SetLandmarkPoseRequest, landmark_pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SubmapPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SubmapPose, submap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SubmapPose, submap_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::SubmapPose, global_pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetAllSubmapPosesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetAllSubmapPosesResponse, submap_poses_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetLocalToGlobalTransformRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetLocalToGlobalTransformRequest, trajectory_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetLocalToGlobalTransformResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetLocalToGlobalTransformResponse, local_to_global_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetConstraintsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::GetConstraintsResponse, constraints_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::cartographer::cloud::proto::WriteStateResponseDefaultTypeInternal, header_),
  offsetof(::cartographer::cloud::proto::WriteStateResponseDefaultTypeInternal, serialized_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateResponse, state_chunk_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateToFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateToFileRequest, filename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateToFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateToFileResponse, success_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFinishedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFinishedRequest, trajectory_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFinishedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFinishedResponse, is_finished_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFrozenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFrozenRequest, trajectory_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFrozenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFrozenResponse, is_frozen_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::cloud::proto::SensorId)},
  { 7, -1, sizeof(::cartographer::cloud::proto::AddTrajectoryRequest)},
  { 15, -1, sizeof(::cartographer::cloud::proto::SensorMetadata)},
  { 23, -1, sizeof(::cartographer::cloud::proto::SensorData)},
  { 36, -1, sizeof(::cartographer::cloud::proto::AddTrajectoryResponse)},
  { 42, -1, sizeof(::cartographer::cloud::proto::AddSensorDataBatchRequest)},
  { 48, -1, sizeof(::cartographer::cloud::proto::AddOdometryDataRequest)},
  { 55, -1, sizeof(::cartographer::cloud::proto::AddImuDataRequest)},
  { 62, -1, sizeof(::cartographer::cloud::proto::AddRangefinderDataRequest)},
  { 69, -1, sizeof(::cartographer::cloud::proto::AddFixedFramePoseDataRequest)},
  { 76, -1, sizeof(::cartographer::cloud::proto::AddLandmarkDataRequest)},
  { 83, -1, sizeof(::cartographer::cloud::proto::FinishTrajectoryRequest)},
  { 90, -1, sizeof(::cartographer::cloud::proto::DeleteTrajectoryRequest)},
  { 97, -1, sizeof(::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest)},
  { 103, -1, sizeof(::cartographer::cloud::proto::LocalSlamInsertionResult)},
  { 109, -1, sizeof(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse)},
  { 119, 126, sizeof(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse)},
  { 128, 135, sizeof(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse)},
  { 137, -1, sizeof(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse)},
  { 144, -1, sizeof(::cartographer::cloud::proto::GetSubmapRequest)},
  { 150, -1, sizeof(::cartographer::cloud::proto::LoadStateRequest)},
  { 160, 167, sizeof(::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse)},
  { 169, -1, sizeof(::cartographer::cloud::proto::TrajectoryRemapping)},
  { 175, -1, sizeof(::cartographer::cloud::proto::LoadStateResponse)},
  { 181, -1, sizeof(::cartographer::cloud::proto::LoadStateFromFileRequest)},
  { 189, -1, sizeof(::cartographer::cloud::proto::LoadStateFromFileResponse)},
  { 195, -1, sizeof(::cartographer::cloud::proto::GetSubmapResponse)},
  { 202, -1, sizeof(::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData)},
  { 209, -1, sizeof(::cartographer::cloud::proto::TrajectoryNodePose)},
  { 217, -1, sizeof(::cartographer::cloud::proto::GetTrajectoryNodePosesResponse)},
  { 223, 230, sizeof(::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse)},
  { 232, -1, sizeof(::cartographer::cloud::proto::GetTrajectoryStatesResponse)},
  { 238, -1, sizeof(::cartographer::cloud::proto::GetLandmarkPosesResponse)},
  { 244, -1, sizeof(::cartographer::cloud::proto::SetLandmarkPoseRequest)},
  { 250, -1, sizeof(::cartographer::cloud::proto::SubmapPose)},
  { 258, -1, sizeof(::cartographer::cloud::proto::GetAllSubmapPosesResponse)},
  { 264, -1, sizeof(::cartographer::cloud::proto::GetLocalToGlobalTransformRequest)},
  { 270, -1, sizeof(::cartographer::cloud::proto::GetLocalToGlobalTransformResponse)},
  { 276, -1, sizeof(::cartographer::cloud::proto::GetConstraintsResponse)},
  { 282, -1, sizeof(::cartographer::cloud::proto::WriteStateResponse)},
  { 290, -1, sizeof(::cartographer::cloud::proto::WriteStateToFileRequest)},
  { 296, -1, sizeof(::cartographer::cloud::proto::WriteStateToFileResponse)},
  { 302, -1, sizeof(::cartographer::cloud::proto::IsTrajectoryFinishedRequest)},
  { 308, -1, sizeof(::cartographer::cloud::proto::IsTrajectoryFinishedResponse)},
  { 314, -1, sizeof(::cartographer::cloud::proto::IsTrajectoryFrozenRequest)},
  { 320, -1, sizeof(::cartographer::cloud::proto::IsTrajectoryFrozenResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_SensorId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_AddTrajectoryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_SensorMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_SensorData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_AddTrajectoryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_AddSensorDataBatchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_AddOdometryDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_AddImuDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_AddFixedFramePoseDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_AddLandmarkDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_FinishTrajectoryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_DeleteTrajectoryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_ReceiveLocalSlamResultsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_LocalSlamInsertionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_ReceiveLocalSlamResultsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_GetSubmapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_LoadStateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_TrajectoryRemapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_LoadStateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_LoadStateFromFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_LoadStateFromFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_GetSubmapResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_TrajectoryNodePose_ConstantPoseData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_TrajectoryNodePose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_GetTrajectoryNodePosesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_GetTrajectoryStatesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_GetLandmarkPosesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_SetLandmarkPoseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_SubmapPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_GetAllSubmapPosesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_GetLocalToGlobalTransformRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_GetLocalToGlobalTransformResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_GetConstraintsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_WriteStateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_WriteStateToFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_WriteStateToFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_IsTrajectoryFinishedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_IsTrajectoryFinishedResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_IsTrajectoryFrozenRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_IsTrajectoryFrozenResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cartographer/cloud/proto/map_builder_service.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 46);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n2cartographer/cloud/proto/map_builder_s"
      "ervice.proto\022\030cartographer.cloud.proto\032+"
      "cartographer/mapping/proto/pose_graph.pr"
      "oto\032.cartographer/mapping/proto/serializ"
      "ation.proto\0325cartographer/mapping/proto/"
      "submap_visualization.proto\032;cartographer"
      "/mapping/proto/trajectory_builder_option"
      "s.proto\032&cartographer/sensor/proto/senso"
      "r.proto\032,cartographer/transform/proto/tr"
      "ansform.proto\032\033google/protobuf/empty.pro"
      "to\"J\n\010SensorId\022\n\n\002id\030\001 \001(\t\0222\n\004type\030\002 \001(\016"
      "2$.cartographer.cloud.proto.SensorType\"\304"
      "\001\n\024AddTrajectoryRequest\022\?\n\023expected_sens"
      "or_ids\030\003 \003(\0132\".cartographer.cloud.proto."
      "SensorId\022X\n\032trajectory_builder_options\030\002"
      " \001(\01324.cartographer.mapping.proto.Trajec"
      "toryBuilderOptions\022\021\n\tclient_id\030\004 \001(\t\"M\n"
      "\016SensorMetadata\022\025\n\rtrajectory_id\030\001 \001(\005\022\021"
      "\n\tsensor_id\030\002 \001(\t\022\021\n\tclient_id\030\003 \001(\t\"\217\004\n"
      "\nSensorData\022A\n\017sensor_metadata\030\001 \001(\0132(.c"
      "artographer.cloud.proto.SensorMetadata\022@"
      "\n\rodometry_data\030\002 \001(\0132\'.cartographer.sen"
      "sor.proto.OdometryDataH\000\0226\n\010imu_data\030\003 \001"
      "(\0132\".cartographer.sensor.proto.ImuDataH\000"
      "\022P\n\026timed_point_cloud_data\030\004 \001(\0132..carto"
      "grapher.sensor.proto.TimedPointCloudData"
      "H\000\022N\n\025fixed_frame_pose_data\030\005 \001(\0132-.cart"
      "ographer.sensor.proto.FixedFramePoseData"
      "H\000\022@\n\rlandmark_data\030\006 \001(\0132\'.cartographer"
      ".sensor.proto.LandmarkDataH\000\022Q\n\026local_sl"
      "am_result_data\030\007 \001(\0132/.cartographer.mapp"
      "ing.proto.LocalSlamResultDataH\000B\r\n\013senso"
      "r_data\".\n\025AddTrajectoryResponse\022\025\n\rtraje"
      "ctory_id\030\001 \001(\005\"V\n\031AddSensorDataBatchRequ"
      "est\0229\n\013sensor_data\030\001 \003(\0132$.cartographer."
      "cloud.proto.SensorData\"\233\001\n\026AddOdometryDa"
      "taRequest\022A\n\017sensor_metadata\030\001 \001(\0132(.car"
      "tographer.cloud.proto.SensorMetadata\022>\n\r"
      "odometry_data\030\002 \001(\0132\'.cartographer.senso"
      "r.proto.OdometryData\"\214\001\n\021AddImuDataReque"
      "st\022A\n\017sensor_metadata\030\001 \001(\0132(.cartograph"
      "er.cloud.proto.SensorMetadata\0224\n\010imu_dat"
      "a\030\002 \001(\0132\".cartographer.sensor.proto.ImuD"
      "ata\"\256\001\n\031AddRangefinderDataRequest\022A\n\017sen"
      "sor_metadata\030\001 \001(\0132(.cartographer.cloud."
      "proto.SensorMetadata\022N\n\026timed_point_clou"
      "d_data\030\002 \001(\0132..cartographer.sensor.proto"
      ".TimedPointCloudData\"\257\001\n\034AddFixedFramePo"
      "seDataRequest\022A\n\017sensor_metadata\030\001 \001(\0132("
      ".cartographer.cloud.proto.SensorMetadata"
      "\022L\n\025fixed_frame_pose_data\030\002 \001(\0132-.cartog"
      "rapher.sensor.proto.FixedFramePoseData\"\233"
      "\001\n\026AddLandmarkDataRequest\022A\n\017sensor_meta"
      "data\030\001 \001(\0132(.cartographer.cloud.proto.Se"
      "nsorMetadata\022>\n\rlandmark_data\030\002 \001(\0132\'.ca"
      "rtographer.sensor.proto.LandmarkData\"C\n\027"
      "FinishTrajectoryRequest\022\025\n\rtrajectory_id"
      "\030\001 \001(\005\022\021\n\tclient_id\030\002 \001(\t\"C\n\027DeleteTraje"
      "ctoryRequest\022\025\n\rtrajectory_id\030\001 \001(\005\022\021\n\tc"
      "lient_id\030\002 \001(\t\"7\n\036ReceiveLocalSlamResult"
      "sRequest\022\025\n\rtrajectory_id\030\001 \001(\005\"O\n\030Local"
      "SlamInsertionResult\0223\n\007node_id\030\001 \001(\0132\".c"
      "artographer.mapping.proto.NodeId\"\216\002\n\037Rec"
      "eiveLocalSlamResultsResponse\022\025\n\rtrajecto"
      "ry_id\030\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\003\0229\n\nlocal_"
      "pose\030\003 \001(\0132%.cartographer.transform.prot"
      "o.Rigid3d\0228\n\nrange_data\030\004 \001(\0132$.cartogra"
      "pher.sensor.proto.RangeData\022L\n\020insertion"
      "_result\030\005 \001(\01322.cartographer.cloud.proto"
      ".LocalSlamInsertionResult\"\354\003\n&ReceiveGlo"
      "balSlamOptimizationsResponse\022{\n\027last_opt"
      "imized_node_ids\030\001 \003(\0132Z.cartographer.clo"
      "ud.proto.ReceiveGlobalSlamOptimizationsR"
      "esponse.LastOptimizedNodeIdsEntry\022\177\n\031las"
      "t_optimized_submap_ids\030\002 \003(\0132\\.cartograp"
      "her.cloud.proto.ReceiveGlobalSlamOptimiz"
      "ationsResponse.LastOptimizedSubmapIdsEnt"
      "ry\032_\n\031LastOptimizedNodeIdsEntry\022\013\n\003key\030\001"
      " \001(\005\0221\n\005value\030\002 \001(\0132\".cartographer.mappi"
      "ng.proto.NodeId:\0028\001\032c\n\033LastOptimizedSubm"
      "apIdsEntry\022\013\n\003key\030\001 \001(\005\0223\n\005value\030\002 \001(\0132$"
      ".cartographer.mapping.proto.SubmapId:\0028\001"
      "\"K\n\020GetSubmapRequest\0227\n\tsubmap_id\030\001 \001(\0132"
      "$.cartographer.mapping.proto.SubmapId\"\351\001"
      "\n\020LoadStateRequest\022E\n\017serialized_data\030\001 "
      "\001(\0132*.cartographer.mapping.proto.Seriali"
      "zedDataH\000\022O\n\024serialization_header\030\002 \001(\0132"
      "/.cartographer.mapping.proto.Serializati"
      "onHeaderH\000\022\023\n\tclient_id\030\003 \001(\tH\000\022\031\n\021load_"
      "frozen_state\030\004 \001(\010B\r\n\013state_chunk\"\355\001\n\023Tr"
      "ajectoryRemapping\022\210\001\n\'serialized_traject"
      "ories_to_trajectories\030\001 \003(\0132W.cartograph"
      "er.cloud.proto.TrajectoryRemapping.Seria"
      "lizedTrajectoriesToTrajectoriesEntry\032K\n)"
      "SerializedTrajectoriesToTrajectoriesEntr"
      "y\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"`\n\021Loa"
      "dStateResponse\022K\n\024trajectory_remapping\030\001"
      " \001(\0132-.cartographer.cloud.proto.Trajecto"
      "ryRemapping\"[\n\030LoadStateFromFileRequest\022"
      "\021\n\tfile_path\030\001 \001(\t\022\021\n\tclient_id\030\002 \001(\t\022\031\n"
      "\021load_frozen_state\030\003 \001(\010\"h\n\031LoadStateFro"
      "mFileResponse\022K\n\024trajectory_remapping\030\001 "
      "\001(\0132-.cartographer.cloud.proto.Trajector"
      "yRemapping\"w\n\021GetSubmapResponse\022O\n\025subma"
      "p_query_response\030\001 \001(\01320.cartographer.ma"
      "pping.proto.SubmapQuery.Response\022\021\n\terro"
      "r_msg\030\002 \001(\t\"\302\002\n\022TrajectoryNodePose\0223\n\007no"
      "de_id\030\001 \001(\0132\".cartographer.mapping.proto"
      ".NodeId\022:\n\013global_pose\030\002 \001(\0132%.cartograp"
      "her.transform.proto.Rigid3d\022Y\n\022constant_"
      "pose_data\030\003 \001(\0132=.cartographer.cloud.pro"
      "to.TrajectoryNodePose.ConstantPoseData\032`"
      "\n\020ConstantPoseData\022\021\n\ttimestamp\030\001 \001(\003\0229\n"
      "\nlocal_pose\030\002 \001(\0132%.cartographer.transfo"
      "rm.proto.Rigid3d\"b\n\036GetTrajectoryNodePos"
      "esResponse\022@\n\nnode_poses\030\001 \003(\0132,.cartogr"
      "apher.cloud.proto.TrajectoryNodePose\"\354\001\n"
      "\033GetTrajectoryStatesResponse\022h\n\022trajecto"
      "ries_state\030\001 \003(\0132L.cartographer.cloud.pr"
      "oto.GetTrajectoryStatesResponse.Trajecto"
      "riesStateEntry\032c\n\026TrajectoriesStateEntry"
      "\022\013\n\003key\030\001 \001(\005\0228\n\005value\030\002 \001(\0162).cartograp"
      "her.cloud.proto.TrajectoryState:\0028\001\"f\n\030G"
      "etLandmarkPosesResponse\022J\n\016landmark_pose"
      "s\030\001 \003(\01322.cartographer.mapping.proto.Pos"
      "eGraph.LandmarkPose\"c\n\026SetLandmarkPoseRe"
      "quest\022I\n\rlandmark_pose\030\001 \001(\01322.cartograp"
      "her.mapping.proto.PoseGraph.LandmarkPose"
      "\"\231\001\n\nSubmapPose\0227\n\tsubmap_id\030\001 \001(\0132$.car"
      "tographer.mapping.proto.SubmapId\022\026\n\016subm"
      "ap_version\030\002 \001(\005\022:\n\013global_pose\030\003 \001(\0132%."
      "cartographer.transform.proto.Rigid3d\"W\n\031"
      "GetAllSubmapPosesResponse\022:\n\014submap_pose"
      "s\030\001 \003(\0132$.cartographer.cloud.proto.Subma"
      "pPose\"9\n GetLocalToGlobalTransformReques"
      "t\022\025\n\rtrajectory_id\030\001 \001(\005\"c\n!GetLocalToGl"
      "obalTransformResponse\022>\n\017local_to_global"
      "\030\001 \001(\0132%.cartographer.transform.proto.Ri"
      "gid3d\"_\n\026GetConstraintsResponse\022E\n\013const"
      "raints\030\001 \003(\01320.cartographer.mapping.prot"
      "o.PoseGraph.Constraint\"\255\001\n\022WriteStateRes"
      "ponse\022A\n\006header\030\001 \001(\0132/.cartographer.map"
      "ping.proto.SerializationHeaderH\000\022E\n\017seri"
      "alized_data\030\002 \001(\0132*.cartographer.mapping"
      ".proto.SerializedDataH\000B\r\n\013state_chunk\"+"
      "\n\027WriteStateToFileRequest\022\020\n\010filename\030\001 "
      "\001(\t\"+\n\030WriteStateToFileResponse\022\017\n\007succe"
      "ss\030\001 \001(\010\"4\n\033IsTrajectoryFinishedRequest\022"
      "\025\n\rtrajectory_id\030\001 \001(\005\"3\n\034IsTrajectoryFi"
      "nishedResponse\022\023\n\013is_finished\030\001 \001(\010\"2\n\031I"
      "sTrajectoryFrozenRequest\022\025\n\rtrajectory_i"
      "d\030\001 \001(\005\"/\n\032IsTrajectoryFrozenResponse\022\021\n"
      "\tis_frozen\030\001 \001(\010*i\n\nSensorType\022\t\n\005RANGE\020"
      "\000\022\007\n\003IMU\020\001\022\014\n\010ODOMETRY\020\002\022\024\n\020FIXED_FRAME_"
      "POSE\020\003\022\014\n\010LANDMARK\020\004\022\025\n\021LOCAL_SLAM_RESUL"
      "T\020\005*D\n\017TrajectoryState\022\n\n\006ACTIVE\020\000\022\014\n\010FI"
      "NISHED\020\001\022\n\n\006FROZEN\020\002\022\013\n\007DELETED\020\0032\354\025\n\021Ma"
      "pBuilderService\022p\n\rAddTrajectory\022..carto"
      "grapher.cloud.proto.AddTrajectoryRequest"
      "\032/.cartographer.cloud.proto.AddTrajector"
      "yResponse\022a\n\022AddSensorDataBatch\0223.cartog"
      "rapher.cloud.proto.AddSensorDataBatchReq"
      "uest\032\026.google.protobuf.Empty\022]\n\017AddOdome"
      "tryData\0220.cartographer.cloud.proto.AddOd"
      "ometryDataRequest\032\026.google.protobuf.Empt"
      "y(\001\022S\n\nAddImuData\022+.cartographer.cloud.p"
      "roto.AddImuDataRequest\032\026.google.protobuf"
      ".Empty(\001\022c\n\022AddRangefinderData\0223.cartogr"
      "apher.cloud.proto.AddRangefinderDataRequ"
      "est\032\026.google.protobuf.Empty(\001\022i\n\025AddFixe"
      "dFramePoseData\0226.cartographer.cloud.prot"
      "o.AddFixedFramePoseDataRequest\032\026.google."
      "protobuf.Empty(\001\022]\n\017AddLandmarkData\0220.ca"
      "rtographer.cloud.proto.AddLandmarkDataRe"
      "quest\032\026.google.protobuf.Empty(\001\022\220\001\n\027Rece"
      "iveLocalSlamResults\0228.cartographer.cloud"
      ".proto.ReceiveLocalSlamResultsRequest\0329."
      "cartographer.cloud.proto.ReceiveLocalSla"
      "mResultsResponse0\001\022|\n\036ReceiveGlobalSlamO"
      "ptimizations\022\026.google.protobuf.Empty\032@.c"
      "artographer.cloud.proto.ReceiveGlobalSla"
      "mOptimizationsResponse0\001\022]\n\020FinishTrajec"
      "tory\0221.cartographer.cloud.proto.FinishTr"
      "ajectoryRequest\032\026.google.protobuf.Empty\022"
      "]\n\020DeleteTrajectory\0221.cartographer.cloud"
      ".proto.DeleteTrajectoryRequest\032\026.google."
      "protobuf.Empty\022d\n\tGetSubmap\022*.cartograph"
      "er.cloud.proto.GetSubmapRequest\032+.cartog"
      "rapher.cloud.proto.GetSubmapResponse\022j\n\026"
      "GetTrajectoryNodePoses\022\026.google.protobuf"
      ".Empty\0328.cartographer.cloud.proto.GetTra"
      "jectoryNodePosesResponse\022d\n\023GetTrajector"
      "yStates\022\026.google.protobuf.Empty\0325.cartog"
      "rapher.cloud.proto.GetTrajectoryStatesRe"
      "sponse\022^\n\020GetLandmarkPoses\022\026.google.prot"
      "obuf.Empty\0322.cartographer.cloud.proto.Ge"
      "tLandmarkPosesResponse\022`\n\021GetAllSubmapPo"
      "ses\022\026.google.protobuf.Empty\0323.cartograph"
      "er.cloud.proto.GetAllSubmapPosesResponse"
      "\022\224\001\n\031GetLocalToGlobalTransform\022:.cartogr"
      "apher.cloud.proto.GetLocalToGlobalTransf"
      "ormRequest\032;.cartographer.cloud.proto.Ge"
      "tLocalToGlobalTransformResponse\022Z\n\016GetCo"
      "nstraints\022\026.google.protobuf.Empty\0320.cart"
      "ographer.cloud.proto.GetConstraintsRespo"
      "nse\022[\n\017SetLandmarkPose\0220.cartographer.cl"
      "oud.proto.SetLandmarkPoseRequest\032\026.googl"
      "e.protobuf.Empty\022\205\001\n\024IsTrajectoryFinishe"
      "d\0225.cartographer.cloud.proto.IsTrajector"
      "yFinishedRequest\0326.cartographer.cloud.pr"
      "oto.IsTrajectoryFinishedResponse\022\177\n\022IsTr"
      "ajectoryFrozen\0223.cartographer.cloud.prot"
      "o.IsTrajectoryFrozenRequest\0324.cartograph"
      "er.cloud.proto.IsTrajectoryFrozenRespons"
      "e\022F\n\024RunFinalOptimization\022\026.google.proto"
      "buf.Empty\032\026.google.protobuf.Empty\022f\n\tLoa"
      "dState\022*.cartographer.cloud.proto.LoadSt"
      "ateRequest\032+.cartographer.cloud.proto.Lo"
      "adStateResponse(\001\022|\n\021LoadStateFromFile\0222"
      ".cartographer.cloud.proto.LoadStateFromF"
      "ileRequest\0323.cartographer.cloud.proto.Lo"
      "adStateFromFileResponse\022T\n\nWriteState\022\026."
      "google.protobuf.Empty\032,.cartographer.clo"
      "ud.proto.WriteStateResponse0\001\022y\n\020WriteSt"
      "ateToFile\0221.cartographer.cloud.proto.Wri"
      "teStateToFileRequest\0322.cartographer.clou"
      "d.proto.WriteStateToFileResponseb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9080);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/cloud/proto/map_builder_service.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::AddDescriptors();
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto
namespace cartographer {
namespace cloud {
namespace proto {
const ::google::protobuf::EnumDescriptor* SensorType_descriptor() {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_enum_descriptors[0];
}
bool SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrajectoryState_descriptor() {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_enum_descriptors[1];
}
bool TrajectoryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SensorId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorId::kIdFieldNumber;
const int SensorId::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorId::SensorId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SensorId)
}
SensorId::SensorId(const SensorId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SensorId)
}

void SensorId::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

SensorId::~SensorId() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SensorId)
  SharedDtor();
}

void SensorId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorId::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorId& SensorId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorId.base);
  return *internal_default_instance();
}


void SensorId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SensorId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool SensorId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.SensorId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.SensorId.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.cloud.proto.SensorType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::cartographer::cloud::proto::SensorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.SensorId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.SensorId)
  return false;
#undef DO_
}

void SensorId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.SensorId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .cartographer.cloud.proto.SensorType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.SensorId)
}

::google::protobuf::uint8* SensorId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SensorId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .cartographer.cloud.proto.SensorType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SensorId)
  return target;
}

size_t SensorId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SensorId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .cartographer.cloud.proto.SensorType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SensorId)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SensorId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SensorId)
    MergeFrom(*source);
  }
}

void SensorId::MergeFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SensorId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SensorId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorId::CopyFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorId::IsInitialized() const {
  return true;
}

void SensorId::Swap(SensorId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorId::InternalSwap(SensorId* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorId::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddTrajectoryRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddTrajectoryRequest_default_instance_._instance.get_mutable()->trajectory_builder_options_ = const_cast< ::cartographer::mapping::proto::TrajectoryBuilderOptions*>(
      ::cartographer::mapping::proto::TrajectoryBuilderOptions::internal_default_instance());
}
void AddTrajectoryRequest::clear_trajectory_builder_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_options_ != NULL) {
    delete trajectory_builder_options_;
  }
  trajectory_builder_options_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTrajectoryRequest::kExpectedSensorIdsFieldNumber;
const int AddTrajectoryRequest::kTrajectoryBuilderOptionsFieldNumber;
const int AddTrajectoryRequest::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTrajectoryRequest::AddTrajectoryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddTrajectoryRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddTrajectoryRequest)
}
AddTrajectoryRequest::AddTrajectoryRequest(const AddTrajectoryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      expected_sensor_ids_(from.expected_sensor_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.has_trajectory_builder_options()) {
    trajectory_builder_options_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions(*from.trajectory_builder_options_);
  } else {
    trajectory_builder_options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddTrajectoryRequest)
}

void AddTrajectoryRequest::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trajectory_builder_options_ = NULL;
}

AddTrajectoryRequest::~AddTrajectoryRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddTrajectoryRequest)
  SharedDtor();
}

void AddTrajectoryRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trajectory_builder_options_;
}

void AddTrajectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddTrajectoryRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddTrajectoryRequest& AddTrajectoryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddTrajectoryRequest.base);
  return *internal_default_instance();
}


void AddTrajectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddTrajectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expected_sensor_ids_.Clear();
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && trajectory_builder_options_ != NULL) {
    delete trajectory_builder_options_;
  }
  trajectory_builder_options_ = NULL;
  _internal_metadata_.Clear();
}

bool AddTrajectoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.AddTrajectoryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_builder_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.cloud.proto.SensorId expected_sensor_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_expected_sensor_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.AddTrajectoryRequest.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.AddTrajectoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.AddTrajectoryRequest)
  return false;
#undef DO_
}

void AddTrajectoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.AddTrajectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_trajectory_builder_options(), output);
  }

  // repeated .cartographer.cloud.proto.SensorId expected_sensor_ids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->expected_sensor_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->expected_sensor_ids(static_cast<int>(i)),
      output);
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.AddTrajectoryRequest.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.AddTrajectoryRequest)
}

::google::protobuf::uint8* AddTrajectoryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddTrajectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_trajectory_builder_options(), deterministic, target);
  }

  // repeated .cartographer.cloud.proto.SensorId expected_sensor_ids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->expected_sensor_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->expected_sensor_ids(static_cast<int>(i)), deterministic, target);
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.AddTrajectoryRequest.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddTrajectoryRequest)
  return target;
}

size_t AddTrajectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddTrajectoryRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.cloud.proto.SensorId expected_sensor_ids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->expected_sensor_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->expected_sensor_ids(static_cast<int>(i)));
    }
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_builder_options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTrajectoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTrajectoryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddTrajectoryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddTrajectoryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddTrajectoryRequest)
    MergeFrom(*source);
  }
}

void AddTrajectoryRequest::MergeFrom(const AddTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expected_sensor_ids_.MergeFrom(from.expected_sensor_ids_);
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.has_trajectory_builder_options()) {
    mutable_trajectory_builder_options()->::cartographer::mapping::proto::TrajectoryBuilderOptions::MergeFrom(from.trajectory_builder_options());
  }
}

void AddTrajectoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTrajectoryRequest::CopyFrom(const AddTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTrajectoryRequest::IsInitialized() const {
  return true;
}

void AddTrajectoryRequest::Swap(AddTrajectoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTrajectoryRequest::InternalSwap(AddTrajectoryRequest* other) {
  using std::swap;
  CastToBase(&expected_sensor_ids_)->InternalSwap(CastToBase(&other->expected_sensor_ids_));
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trajectory_builder_options_, other->trajectory_builder_options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddTrajectoryRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorMetadata::kTrajectoryIdFieldNumber;
const int SensorMetadata::kSensorIdFieldNumber;
const int SensorMetadata::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorMetadata::SensorMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SensorMetadata)
}
SensorMetadata::SensorMetadata(const SensorMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sensor_id().size() > 0) {
    sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SensorMetadata)
}

void SensorMetadata::SharedCtor() {
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
}

SensorMetadata::~SensorMetadata() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SensorMetadata)
  SharedDtor();
}

void SensorMetadata::SharedDtor() {
  sensor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorMetadata::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorMetadata& SensorMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorMetadata.base);
  return *internal_default_instance();
}


void SensorMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SensorMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool SensorMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.SensorMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sensor_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.SensorMetadata.sensor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.SensorMetadata.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.SensorMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.SensorMetadata)
  return false;
#undef DO_
}

void SensorMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.SensorMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // string sensor_id = 2;
  if (this->sensor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorMetadata.sensor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sensor_id(), output);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorMetadata.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.SensorMetadata)
}

::google::protobuf::uint8* SensorMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SensorMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // string sensor_id = 2;
  if (this->sensor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorMetadata.sensor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sensor_id(), target);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorMetadata.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SensorMetadata)
  return target;
}

size_t SensorMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SensorMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sensor_id = 2;
  if (this->sensor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_id());
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SensorMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SensorMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SensorMetadata)
    MergeFrom(*source);
  }
}

void SensorMetadata::MergeFrom(const SensorMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SensorMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_id().size() > 0) {

    sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void SensorMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMetadata::CopyFrom(const SensorMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMetadata::IsInitialized() const {
  return true;
}

void SensorMetadata::Swap(SensorMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorMetadata::InternalSwap(SensorMetadata* other) {
  using std::swap;
  sensor_id_.Swap(&other->sensor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorMetadata::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorData::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_SensorData_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.odometry_data_ = const_cast< ::cartographer::sensor::proto::OdometryData*>(
      ::cartographer::sensor::proto::OdometryData::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.imu_data_ = const_cast< ::cartographer::sensor::proto::ImuData*>(
      ::cartographer::sensor::proto::ImuData::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.timed_point_cloud_data_ = const_cast< ::cartographer::sensor::proto::TimedPointCloudData*>(
      ::cartographer::sensor::proto::TimedPointCloudData::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.fixed_frame_pose_data_ = const_cast< ::cartographer::sensor::proto::FixedFramePoseData*>(
      ::cartographer::sensor::proto::FixedFramePoseData::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.landmark_data_ = const_cast< ::cartographer::sensor::proto::LandmarkData*>(
      ::cartographer::sensor::proto::LandmarkData::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.local_slam_result_data_ = const_cast< ::cartographer::mapping::proto::LocalSlamResultData*>(
      ::cartographer::mapping::proto::LocalSlamResultData::internal_default_instance());
}
void SensorData::set_allocated_odometry_data(::cartographer::sensor::proto::OdometryData* odometry_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (odometry_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      odometry_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, odometry_data, submessage_arena);
    }
    set_has_odometry_data();
    sensor_data_.odometry_data_ = odometry_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.odometry_data)
}
void SensorData::clear_odometry_data() {
  if (has_odometry_data()) {
    delete sensor_data_.odometry_data_;
    clear_has_sensor_data();
  }
}
void SensorData::set_allocated_imu_data(::cartographer::sensor::proto::ImuData* imu_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (imu_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu_data, submessage_arena);
    }
    set_has_imu_data();
    sensor_data_.imu_data_ = imu_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.imu_data)
}
void SensorData::clear_imu_data() {
  if (has_imu_data()) {
    delete sensor_data_.imu_data_;
    clear_has_sensor_data();
  }
}
void SensorData::set_allocated_timed_point_cloud_data(::cartographer::sensor::proto::TimedPointCloudData* timed_point_cloud_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (timed_point_cloud_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timed_point_cloud_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timed_point_cloud_data, submessage_arena);
    }
    set_has_timed_point_cloud_data();
    sensor_data_.timed_point_cloud_data_ = timed_point_cloud_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.timed_point_cloud_data)
}
void SensorData::clear_timed_point_cloud_data() {
  if (has_timed_point_cloud_data()) {
    delete sensor_data_.timed_point_cloud_data_;
    clear_has_sensor_data();
  }
}
void SensorData::set_allocated_fixed_frame_pose_data(::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (fixed_frame_pose_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fixed_frame_pose_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_frame_pose_data, submessage_arena);
    }
    set_has_fixed_frame_pose_data();
    sensor_data_.fixed_frame_pose_data_ = fixed_frame_pose_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.fixed_frame_pose_data)
}
void SensorData::clear_fixed_frame_pose_data() {
  if (has_fixed_frame_pose_data()) {
    delete sensor_data_.fixed_frame_pose_data_;
    clear_has_sensor_data();
  }
}
void SensorData::set_allocated_landmark_data(::cartographer::sensor::proto::LandmarkData* landmark_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (landmark_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      landmark_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, landmark_data, submessage_arena);
    }
    set_has_landmark_data();
    sensor_data_.landmark_data_ = landmark_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.landmark_data)
}
void SensorData::clear_landmark_data() {
  if (has_landmark_data()) {
    delete sensor_data_.landmark_data_;
    clear_has_sensor_data();
  }
}
void SensorData::set_allocated_local_slam_result_data(::cartographer::mapping::proto::LocalSlamResultData* local_slam_result_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (local_slam_result_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_slam_result_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_slam_result_data, submessage_arena);
    }
    set_has_local_slam_result_data();
    sensor_data_.local_slam_result_data_ = local_slam_result_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.local_slam_result_data)
}
void SensorData::clear_local_slam_result_data() {
  if (has_local_slam_result_data()) {
    delete sensor_data_.local_slam_result_data_;
    clear_has_sensor_data();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorData::kSensorMetadataFieldNumber;
const int SensorData::kOdometryDataFieldNumber;
const int SensorData::kImuDataFieldNumber;
const int SensorData::kTimedPointCloudDataFieldNumber;
const int SensorData::kFixedFramePoseDataFieldNumber;
const int SensorData::kLandmarkDataFieldNumber;
const int SensorData::kLocalSlamResultDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorData::SensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = NULL;
  }
  clear_has_sensor_data();
  switch (from.sensor_data_case()) {
    case kOdometryData: {
      mutable_odometry_data()->::cartographer::sensor::proto::OdometryData::MergeFrom(from.odometry_data());
      break;
    }
    case kImuData: {
      mutable_imu_data()->::cartographer::sensor::proto::ImuData::MergeFrom(from.imu_data());
      break;
    }
    case kTimedPointCloudData: {
      mutable_timed_point_cloud_data()->::cartographer::sensor::proto::TimedPointCloudData::MergeFrom(from.timed_point_cloud_data());
      break;
    }
    case kFixedFramePoseData: {
      mutable_fixed_frame_pose_data()->::cartographer::sensor::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
      break;
    }
    case kLandmarkData: {
      mutable_landmark_data()->::cartographer::sensor::proto::LandmarkData::MergeFrom(from.landmark_data());
      break;
    }
    case kLocalSlamResultData: {
      mutable_local_slam_result_data()->::cartographer::mapping::proto::LocalSlamResultData::MergeFrom(from.local_slam_result_data());
      break;
    }
    case SENSOR_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SensorData)
}

void SensorData::SharedCtor() {
  sensor_metadata_ = NULL;
  clear_has_sensor_data();
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SensorData)
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (has_sensor_data()) {
    clear_sensor_data();
  }
}

void SensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorData::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorData& SensorData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SensorData.base);
  return *internal_default_instance();
}


void SensorData::clear_sensor_data() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.cloud.proto.SensorData)
  switch (sensor_data_case()) {
    case kOdometryData: {
      delete sensor_data_.odometry_data_;
      break;
    }
    case kImuData: {
      delete sensor_data_.imu_data_;
      break;
    }
    case kTimedPointCloudData: {
      delete sensor_data_.timed_point_cloud_data_;
      break;
    }
    case kFixedFramePoseData: {
      delete sensor_data_.fixed_frame_pose_data_;
      break;
    }
    case kLandmarkData: {
      delete sensor_data_.landmark_data_;
      break;
    }
    case kLocalSlamResultData: {
      delete sensor_data_.local_slam_result_data_;
      break;
    }
    case SENSOR_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SENSOR_DATA_NOT_SET;
}


void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sensor_metadata_ != NULL) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = NULL;
  clear_sensor_data();
  _internal_metadata_.Clear();
}

bool SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.SensorData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.OdometryData odometry_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_odometry_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.ImuData imu_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timed_point_cloud_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_frame_pose_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.LandmarkData landmark_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landmark_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LocalSlamResultData local_slam_result_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_slam_result_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.SensorData)
  return false;
#undef DO_
}

void SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sensor_metadata(), output);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (has_odometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_odometry_data(), output);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 3;
  if (has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_imu_data(), output);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
  if (has_timed_point_cloud_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_timed_point_cloud_data(), output);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (has_fixed_frame_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_fixed_frame_pose_data(), output);
  }

  // .cartographer.sensor.proto.LandmarkData landmark_data = 6;
  if (has_landmark_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_landmark_data(), output);
  }

  // .cartographer.mapping.proto.LocalSlamResultData local_slam_result_data = 7;
  if (has_local_slam_result_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_local_slam_result_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.SensorData)
}

::google::protobuf::uint8* SensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sensor_metadata(), deterministic, target);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (has_odometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_odometry_data(), deterministic, target);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 3;
  if (has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_imu_data(), deterministic, target);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
  if (has_timed_point_cloud_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_timed_point_cloud_data(), deterministic, target);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (has_fixed_frame_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_fixed_frame_pose_data(), deterministic, target);
  }

  // .cartographer.sensor.proto.LandmarkData landmark_data = 6;
  if (has_landmark_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_landmark_data(), deterministic, target);
  }

  // .cartographer.mapping.proto.LocalSlamResultData local_slam_result_data = 7;
  if (has_local_slam_result_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_local_slam_result_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SensorData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  switch (sensor_data_case()) {
    // .cartographer.sensor.proto.OdometryData odometry_data = 2;
    case kOdometryData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sensor_data_.odometry_data_);
      break;
    }
    // .cartographer.sensor.proto.ImuData imu_data = 3;
    case kImuData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sensor_data_.imu_data_);
      break;
    }
    // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
    case kTimedPointCloudData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sensor_data_.timed_point_cloud_data_);
      break;
    }
    // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 5;
    case kFixedFramePoseData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sensor_data_.fixed_frame_pose_data_);
      break;
    }
    // .cartographer.sensor.proto.LandmarkData landmark_data = 6;
    case kLandmarkData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sensor_data_.landmark_data_);
      break;
    }
    // .cartographer.mapping.proto.LocalSlamResultData local_slam_result_data = 7;
    case kLocalSlamResultData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sensor_data_.local_slam_result_data_);
      break;
    }
    case SENSOR_DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SensorData)
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from.sensor_metadata());
  }
  switch (from.sensor_data_case()) {
    case kOdometryData: {
      mutable_odometry_data()->::cartographer::sensor::proto::OdometryData::MergeFrom(from.odometry_data());
      break;
    }
    case kImuData: {
      mutable_imu_data()->::cartographer::sensor::proto::ImuData::MergeFrom(from.imu_data());
      break;
    }
    case kTimedPointCloudData: {
      mutable_timed_point_cloud_data()->::cartographer::sensor::proto::TimedPointCloudData::MergeFrom(from.timed_point_cloud_data());
      break;
    }
    case kFixedFramePoseData: {
      mutable_fixed_frame_pose_data()->::cartographer::sensor::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
      break;
    }
    case kLandmarkData: {
      mutable_landmark_data()->::cartographer::sensor::proto::LandmarkData::MergeFrom(from.landmark_data());
      break;
    }
    case kLocalSlamResultData: {
      mutable_local_slam_result_data()->::cartographer::mapping::proto::LocalSlamResultData::MergeFrom(from.local_slam_result_data());
      break;
    }
    case SENSOR_DATA_NOT_SET: {
      break;
    }
  }
}

void SensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::Swap(SensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(sensor_data_, other->sensor_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddTrajectoryResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTrajectoryResponse::kTrajectoryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTrajectoryResponse::AddTrajectoryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddTrajectoryResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddTrajectoryResponse)
}
AddTrajectoryResponse::AddTrajectoryResponse(const AddTrajectoryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddTrajectoryResponse)
}

void AddTrajectoryResponse::SharedCtor() {
  trajectory_id_ = 0;
}

AddTrajectoryResponse::~AddTrajectoryResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddTrajectoryResponse)
  SharedDtor();
}

void AddTrajectoryResponse::SharedDtor() {
}

void AddTrajectoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddTrajectoryResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddTrajectoryResponse& AddTrajectoryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddTrajectoryResponse.base);
  return *internal_default_instance();
}


void AddTrajectoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddTrajectoryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool AddTrajectoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.AddTrajectoryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.AddTrajectoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.AddTrajectoryResponse)
  return false;
#undef DO_
}

void AddTrajectoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.AddTrajectoryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.AddTrajectoryResponse)
}

::google::protobuf::uint8* AddTrajectoryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddTrajectoryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddTrajectoryResponse)
  return target;
}

size_t AddTrajectoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddTrajectoryResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTrajectoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTrajectoryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddTrajectoryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddTrajectoryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddTrajectoryResponse)
    MergeFrom(*source);
  }
}

void AddTrajectoryResponse::MergeFrom(const AddTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void AddTrajectoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTrajectoryResponse::CopyFrom(const AddTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTrajectoryResponse::IsInitialized() const {
  return true;
}

void AddTrajectoryResponse::Swap(AddTrajectoryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTrajectoryResponse::InternalSwap(AddTrajectoryResponse* other) {
  using std::swap;
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddTrajectoryResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddSensorDataBatchRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddSensorDataBatchRequest::kSensorDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddSensorDataBatchRequest::AddSensorDataBatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddSensorDataBatchRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddSensorDataBatchRequest)
}
AddSensorDataBatchRequest::AddSensorDataBatchRequest(const AddSensorDataBatchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensor_data_(from.sensor_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddSensorDataBatchRequest)
}

void AddSensorDataBatchRequest::SharedCtor() {
}

AddSensorDataBatchRequest::~AddSensorDataBatchRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddSensorDataBatchRequest)
  SharedDtor();
}

void AddSensorDataBatchRequest::SharedDtor() {
}

void AddSensorDataBatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddSensorDataBatchRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddSensorDataBatchRequest& AddSensorDataBatchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddSensorDataBatchRequest.base);
  return *internal_default_instance();
}


void AddSensorDataBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_data_.Clear();
  _internal_metadata_.Clear();
}

bool AddSensorDataBatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.cloud.proto.SensorData sensor_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sensor_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.AddSensorDataBatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.AddSensorDataBatchRequest)
  return false;
#undef DO_
}

void AddSensorDataBatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.SensorData sensor_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sensor_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.AddSensorDataBatchRequest)
}

::google::protobuf::uint8* AddSensorDataBatchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.SensorData sensor_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sensor_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddSensorDataBatchRequest)
  return target;
}

size_t AddSensorDataBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.cloud.proto.SensorData sensor_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddSensorDataBatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddSensorDataBatchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddSensorDataBatchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddSensorDataBatchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddSensorDataBatchRequest)
    MergeFrom(*source);
  }
}

void AddSensorDataBatchRequest::MergeFrom(const AddSensorDataBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_data_.MergeFrom(from.sensor_data_);
}

void AddSensorDataBatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddSensorDataBatchRequest::CopyFrom(const AddSensorDataBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSensorDataBatchRequest::IsInitialized() const {
  return true;
}

void AddSensorDataBatchRequest::Swap(AddSensorDataBatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddSensorDataBatchRequest::InternalSwap(AddSensorDataBatchRequest* other) {
  using std::swap;
  CastToBase(&sensor_data_)->InternalSwap(CastToBase(&other->sensor_data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddSensorDataBatchRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddOdometryDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddOdometryDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddOdometryDataRequest_default_instance_._instance.get_mutable()->odometry_data_ = const_cast< ::cartographer::sensor::proto::OdometryData*>(
      ::cartographer::sensor::proto::OdometryData::internal_default_instance());
}
void AddOdometryDataRequest::clear_odometry_data() {
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) {
    delete odometry_data_;
  }
  odometry_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddOdometryDataRequest::kSensorMetadataFieldNumber;
const int AddOdometryDataRequest::kOdometryDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddOdometryDataRequest::AddOdometryDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddOdometryDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddOdometryDataRequest)
}
AddOdometryDataRequest::AddOdometryDataRequest(const AddOdometryDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = NULL;
  }
  if (from.has_odometry_data()) {
    odometry_data_ = new ::cartographer::sensor::proto::OdometryData(*from.odometry_data_);
  } else {
    odometry_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddOdometryDataRequest)
}

void AddOdometryDataRequest::SharedCtor() {
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odometry_data_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(odometry_data_));
}

AddOdometryDataRequest::~AddOdometryDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddOdometryDataRequest)
  SharedDtor();
}

void AddOdometryDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete odometry_data_;
}

void AddOdometryDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddOdometryDataRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddOdometryDataRequest& AddOdometryDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddOdometryDataRequest.base);
  return *internal_default_instance();
}


void AddOdometryDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddOdometryDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sensor_metadata_ != NULL) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) {
    delete odometry_data_;
  }
  odometry_data_ = NULL;
  _internal_metadata_.Clear();
}

bool AddOdometryDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.AddOdometryDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.OdometryData odometry_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_odometry_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.AddOdometryDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.AddOdometryDataRequest)
  return false;
#undef DO_
}

void AddOdometryDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.AddOdometryDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sensor_metadata(), output);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_odometry_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.AddOdometryDataRequest)
}

::google::protobuf::uint8* AddOdometryDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddOdometryDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sensor_metadata(), deterministic, target);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_odometry_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddOdometryDataRequest)
  return target;
}

size_t AddOdometryDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddOdometryDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *odometry_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddOdometryDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddOdometryDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddOdometryDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddOdometryDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddOdometryDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddOdometryDataRequest)
    MergeFrom(*source);
  }
}

void AddOdometryDataRequest::MergeFrom(const AddOdometryDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddOdometryDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from.sensor_metadata());
  }
  if (from.has_odometry_data()) {
    mutable_odometry_data()->::cartographer::sensor::proto::OdometryData::MergeFrom(from.odometry_data());
  }
}

void AddOdometryDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddOdometryDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddOdometryDataRequest::CopyFrom(const AddOdometryDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddOdometryDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddOdometryDataRequest::IsInitialized() const {
  return true;
}

void AddOdometryDataRequest::Swap(AddOdometryDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddOdometryDataRequest::InternalSwap(AddOdometryDataRequest* other) {
  using std::swap;
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(odometry_data_, other->odometry_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddOdometryDataRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddImuDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddImuDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddImuDataRequest_default_instance_._instance.get_mutable()->imu_data_ = const_cast< ::cartographer::sensor::proto::ImuData*>(
      ::cartographer::sensor::proto::ImuData::internal_default_instance());
}
void AddImuDataRequest::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) {
    delete imu_data_;
  }
  imu_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddImuDataRequest::kSensorMetadataFieldNumber;
const int AddImuDataRequest::kImuDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddImuDataRequest::AddImuDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddImuDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddImuDataRequest)
}
AddImuDataRequest::AddImuDataRequest(const AddImuDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = NULL;
  }
  if (from.has_imu_data()) {
    imu_data_ = new ::cartographer::sensor::proto::ImuData(*from.imu_data_);
  } else {
    imu_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddImuDataRequest)
}

void AddImuDataRequest::SharedCtor() {
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_data_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(imu_data_));
}

AddImuDataRequest::~AddImuDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddImuDataRequest)
  SharedDtor();
}

void AddImuDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete imu_data_;
}

void AddImuDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddImuDataRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddImuDataRequest& AddImuDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddImuDataRequest.base);
  return *internal_default_instance();
}


void AddImuDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddImuDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sensor_metadata_ != NULL) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) {
    delete imu_data_;
  }
  imu_data_ = NULL;
  _internal_metadata_.Clear();
}

bool AddImuDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.AddImuDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.ImuData imu_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.AddImuDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.AddImuDataRequest)
  return false;
#undef DO_
}

void AddImuDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.AddImuDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sensor_metadata(), output);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_imu_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.AddImuDataRequest)
}

::google::protobuf::uint8* AddImuDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddImuDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sensor_metadata(), deterministic, target);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_imu_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddImuDataRequest)
  return target;
}

size_t AddImuDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddImuDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *imu_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddImuDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddImuDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddImuDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddImuDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddImuDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddImuDataRequest)
    MergeFrom(*source);
  }
}

void AddImuDataRequest::MergeFrom(const AddImuDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddImuDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from.sensor_metadata());
  }
  if (from.has_imu_data()) {
    mutable_imu_data()->::cartographer::sensor::proto::ImuData::MergeFrom(from.imu_data());
  }
}

void AddImuDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddImuDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddImuDataRequest::CopyFrom(const AddImuDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddImuDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddImuDataRequest::IsInitialized() const {
  return true;
}

void AddImuDataRequest::Swap(AddImuDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddImuDataRequest::InternalSwap(AddImuDataRequest* other) {
  using std::swap;
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(imu_data_, other->imu_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddImuDataRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddRangefinderDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_._instance.get_mutable()->timed_point_cloud_data_ = const_cast< ::cartographer::sensor::proto::TimedPointCloudData*>(
      ::cartographer::sensor::proto::TimedPointCloudData::internal_default_instance());
}
void AddRangefinderDataRequest::clear_timed_point_cloud_data() {
  if (GetArenaNoVirtual() == NULL && timed_point_cloud_data_ != NULL) {
    delete timed_point_cloud_data_;
  }
  timed_point_cloud_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRangefinderDataRequest::kSensorMetadataFieldNumber;
const int AddRangefinderDataRequest::kTimedPointCloudDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRangefinderDataRequest::AddRangefinderDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddRangefinderDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddRangefinderDataRequest)
}
AddRangefinderDataRequest::AddRangefinderDataRequest(const AddRangefinderDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = NULL;
  }
  if (from.has_timed_point_cloud_data()) {
    timed_point_cloud_data_ = new ::cartographer::sensor::proto::TimedPointCloudData(*from.timed_point_cloud_data_);
  } else {
    timed_point_cloud_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddRangefinderDataRequest)
}

void AddRangefinderDataRequest::SharedCtor() {
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timed_point_cloud_data_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(timed_point_cloud_data_));
}

AddRangefinderDataRequest::~AddRangefinderDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddRangefinderDataRequest)
  SharedDtor();
}

void AddRangefinderDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete timed_point_cloud_data_;
}

void AddRangefinderDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddRangefinderDataRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddRangefinderDataRequest& AddRangefinderDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddRangefinderDataRequest.base);
  return *internal_default_instance();
}


void AddRangefinderDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sensor_metadata_ != NULL) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && timed_point_cloud_data_ != NULL) {
    delete timed_point_cloud_data_;
  }
  timed_point_cloud_data_ = NULL;
  _internal_metadata_.Clear();
}

bool AddRangefinderDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timed_point_cloud_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.AddRangefinderDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.AddRangefinderDataRequest)
  return false;
#undef DO_
}

void AddRangefinderDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sensor_metadata(), output);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 2;
  if (this->has_timed_point_cloud_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_timed_point_cloud_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.AddRangefinderDataRequest)
}

::google::protobuf::uint8* AddRangefinderDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sensor_metadata(), deterministic, target);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 2;
  if (this->has_timed_point_cloud_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_timed_point_cloud_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddRangefinderDataRequest)
  return target;
}

size_t AddRangefinderDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 2;
  if (this->has_timed_point_cloud_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timed_point_cloud_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRangefinderDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRangefinderDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRangefinderDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddRangefinderDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddRangefinderDataRequest)
    MergeFrom(*source);
  }
}

void AddRangefinderDataRequest::MergeFrom(const AddRangefinderDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from.sensor_metadata());
  }
  if (from.has_timed_point_cloud_data()) {
    mutable_timed_point_cloud_data()->::cartographer::sensor::proto::TimedPointCloudData::MergeFrom(from.timed_point_cloud_data());
  }
}

void AddRangefinderDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRangefinderDataRequest::CopyFrom(const AddRangefinderDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRangefinderDataRequest::IsInitialized() const {
  return true;
}

void AddRangefinderDataRequest::Swap(AddRangefinderDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRangefinderDataRequest::InternalSwap(AddRangefinderDataRequest* other) {
  using std::swap;
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(timed_point_cloud_data_, other->timed_point_cloud_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddRangefinderDataRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddFixedFramePoseDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddFixedFramePoseDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddFixedFramePoseDataRequest_default_instance_._instance.get_mutable()->fixed_frame_pose_data_ = const_cast< ::cartographer::sensor::proto::FixedFramePoseData*>(
      ::cartographer::sensor::proto::FixedFramePoseData::internal_default_instance());
}
void AddFixedFramePoseDataRequest::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFixedFramePoseDataRequest::kSensorMetadataFieldNumber;
const int AddFixedFramePoseDataRequest::kFixedFramePoseDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFixedFramePoseDataRequest::AddFixedFramePoseDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddFixedFramePoseDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
}
AddFixedFramePoseDataRequest::AddFixedFramePoseDataRequest(const AddFixedFramePoseDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = NULL;
  }
  if (from.has_fixed_frame_pose_data()) {
    fixed_frame_pose_data_ = new ::cartographer::sensor::proto::FixedFramePoseData(*from.fixed_frame_pose_data_);
  } else {
    fixed_frame_pose_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
}

void AddFixedFramePoseDataRequest::SharedCtor() {
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed_frame_pose_data_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(fixed_frame_pose_data_));
}

AddFixedFramePoseDataRequest::~AddFixedFramePoseDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  SharedDtor();
}

void AddFixedFramePoseDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete fixed_frame_pose_data_;
}

void AddFixedFramePoseDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddFixedFramePoseDataRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddFixedFramePoseDataRequest& AddFixedFramePoseDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddFixedFramePoseDataRequest.base);
  return *internal_default_instance();
}


void AddFixedFramePoseDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sensor_metadata_ != NULL) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = NULL;
  _internal_metadata_.Clear();
}

bool AddFixedFramePoseDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_frame_pose_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  return false;
#undef DO_
}

void AddFixedFramePoseDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sensor_metadata(), output);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_fixed_frame_pose_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
}

::google::protobuf::uint8* AddFixedFramePoseDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sensor_metadata(), deterministic, target);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_fixed_frame_pose_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  return target;
}

size_t AddFixedFramePoseDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fixed_frame_pose_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFixedFramePoseDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFixedFramePoseDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFixedFramePoseDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
    MergeFrom(*source);
  }
}

void AddFixedFramePoseDataRequest::MergeFrom(const AddFixedFramePoseDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from.sensor_metadata());
  }
  if (from.has_fixed_frame_pose_data()) {
    mutable_fixed_frame_pose_data()->::cartographer::sensor::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
  }
}

void AddFixedFramePoseDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFixedFramePoseDataRequest::CopyFrom(const AddFixedFramePoseDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFixedFramePoseDataRequest::IsInitialized() const {
  return true;
}

void AddFixedFramePoseDataRequest::Swap(AddFixedFramePoseDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFixedFramePoseDataRequest::InternalSwap(AddFixedFramePoseDataRequest* other) {
  using std::swap;
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(fixed_frame_pose_data_, other->fixed_frame_pose_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddFixedFramePoseDataRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddLandmarkDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddLandmarkDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddLandmarkDataRequest_default_instance_._instance.get_mutable()->landmark_data_ = const_cast< ::cartographer::sensor::proto::LandmarkData*>(
      ::cartographer::sensor::proto::LandmarkData::internal_default_instance());
}
void AddLandmarkDataRequest::clear_landmark_data() {
  if (GetArenaNoVirtual() == NULL && landmark_data_ != NULL) {
    delete landmark_data_;
  }
  landmark_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddLandmarkDataRequest::kSensorMetadataFieldNumber;
const int AddLandmarkDataRequest::kLandmarkDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddLandmarkDataRequest::AddLandmarkDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddLandmarkDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddLandmarkDataRequest)
}
AddLandmarkDataRequest::AddLandmarkDataRequest(const AddLandmarkDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = NULL;
  }
  if (from.has_landmark_data()) {
    landmark_data_ = new ::cartographer::sensor::proto::LandmarkData(*from.landmark_data_);
  } else {
    landmark_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddLandmarkDataRequest)
}

void AddLandmarkDataRequest::SharedCtor() {
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&landmark_data_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(landmark_data_));
}

AddLandmarkDataRequest::~AddLandmarkDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddLandmarkDataRequest)
  SharedDtor();
}

void AddLandmarkDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete landmark_data_;
}

void AddLandmarkDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddLandmarkDataRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddLandmarkDataRequest& AddLandmarkDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_AddLandmarkDataRequest.base);
  return *internal_default_instance();
}


void AddLandmarkDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sensor_metadata_ != NULL) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && landmark_data_ != NULL) {
    delete landmark_data_;
  }
  landmark_data_ = NULL;
  _internal_metadata_.Clear();
}

bool AddLandmarkDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landmark_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.AddLandmarkDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.AddLandmarkDataRequest)
  return false;
#undef DO_
}

void AddLandmarkDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sensor_metadata(), output);
  }

  // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  if (this->has_landmark_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_landmark_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.AddLandmarkDataRequest)
}

::google::protobuf::uint8* AddLandmarkDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sensor_metadata(), deterministic, target);
  }

  // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  if (this->has_landmark_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_landmark_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddLandmarkDataRequest)
  return target;
}

size_t AddLandmarkDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  if (this->has_landmark_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *landmark_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddLandmarkDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddLandmarkDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddLandmarkDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddLandmarkDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddLandmarkDataRequest)
    MergeFrom(*source);
  }
}

void AddLandmarkDataRequest::MergeFrom(const AddLandmarkDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from.sensor_metadata());
  }
  if (from.has_landmark_data()) {
    mutable_landmark_data()->::cartographer::sensor::proto::LandmarkData::MergeFrom(from.landmark_data());
  }
}

void AddLandmarkDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLandmarkDataRequest::CopyFrom(const AddLandmarkDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLandmarkDataRequest::IsInitialized() const {
  return true;
}

void AddLandmarkDataRequest::Swap(AddLandmarkDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddLandmarkDataRequest::InternalSwap(AddLandmarkDataRequest* other) {
  using std::swap;
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(landmark_data_, other->landmark_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddLandmarkDataRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FinishTrajectoryRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FinishTrajectoryRequest::kTrajectoryIdFieldNumber;
const int FinishTrajectoryRequest::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishTrajectoryRequest::FinishTrajectoryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_FinishTrajectoryRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.FinishTrajectoryRequest)
}
FinishTrajectoryRequest::FinishTrajectoryRequest(const FinishTrajectoryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.FinishTrajectoryRequest)
}

void FinishTrajectoryRequest::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
}

FinishTrajectoryRequest::~FinishTrajectoryRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.FinishTrajectoryRequest)
  SharedDtor();
}

void FinishTrajectoryRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FinishTrajectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FinishTrajectoryRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishTrajectoryRequest& FinishTrajectoryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_FinishTrajectoryRequest.base);
  return *internal_default_instance();
}


void FinishTrajectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool FinishTrajectoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.FinishTrajectoryRequest.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.FinishTrajectoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.FinishTrajectoryRequest)
  return false;
#undef DO_
}

void FinishTrajectoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.FinishTrajectoryRequest.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.FinishTrajectoryRequest)
}

::google::protobuf::uint8* FinishTrajectoryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.FinishTrajectoryRequest.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.FinishTrajectoryRequest)
  return target;
}

size_t FinishTrajectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishTrajectoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishTrajectoryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishTrajectoryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.FinishTrajectoryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.FinishTrajectoryRequest)
    MergeFrom(*source);
  }
}

void FinishTrajectoryRequest::MergeFrom(const FinishTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void FinishTrajectoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishTrajectoryRequest::CopyFrom(const FinishTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishTrajectoryRequest::IsInitialized() const {
  return true;
}

void FinishTrajectoryRequest::Swap(FinishTrajectoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishTrajectoryRequest::InternalSwap(FinishTrajectoryRequest* other) {
  using std::swap;
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FinishTrajectoryRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteTrajectoryRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteTrajectoryRequest::kTrajectoryIdFieldNumber;
const int DeleteTrajectoryRequest::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTrajectoryRequest::DeleteTrajectoryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_DeleteTrajectoryRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.DeleteTrajectoryRequest)
}
DeleteTrajectoryRequest::DeleteTrajectoryRequest(const DeleteTrajectoryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.DeleteTrajectoryRequest)
}

void DeleteTrajectoryRequest::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
}

DeleteTrajectoryRequest::~DeleteTrajectoryRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.DeleteTrajectoryRequest)
  SharedDtor();
}

void DeleteTrajectoryRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteTrajectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteTrajectoryRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteTrajectoryRequest& DeleteTrajectoryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_DeleteTrajectoryRequest.base);
  return *internal_default_instance();
}


void DeleteTrajectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool DeleteTrajectoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.DeleteTrajectoryRequest.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.DeleteTrajectoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.DeleteTrajectoryRequest)
  return false;
#undef DO_
}

void DeleteTrajectoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.DeleteTrajectoryRequest.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.DeleteTrajectoryRequest)
}

::google::protobuf::uint8* DeleteTrajectoryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.DeleteTrajectoryRequest.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.DeleteTrajectoryRequest)
  return target;
}

size_t DeleteTrajectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTrajectoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTrajectoryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteTrajectoryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.DeleteTrajectoryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.DeleteTrajectoryRequest)
    MergeFrom(*source);
  }
}

void DeleteTrajectoryRequest::MergeFrom(const DeleteTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void DeleteTrajectoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTrajectoryRequest::CopyFrom(const DeleteTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTrajectoryRequest::IsInitialized() const {
  return true;
}

void DeleteTrajectoryRequest::Swap(DeleteTrajectoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteTrajectoryRequest::InternalSwap(DeleteTrajectoryRequest* other) {
  using std::swap;
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteTrajectoryRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReceiveLocalSlamResultsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReceiveLocalSlamResultsRequest::kTrajectoryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReceiveLocalSlamResultsRequest::ReceiveLocalSlamResultsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_ReceiveLocalSlamResultsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
}
ReceiveLocalSlamResultsRequest::ReceiveLocalSlamResultsRequest(const ReceiveLocalSlamResultsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
}

void ReceiveLocalSlamResultsRequest::SharedCtor() {
  trajectory_id_ = 0;
}

ReceiveLocalSlamResultsRequest::~ReceiveLocalSlamResultsRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  SharedDtor();
}

void ReceiveLocalSlamResultsRequest::SharedDtor() {
}

void ReceiveLocalSlamResultsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReceiveLocalSlamResultsRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReceiveLocalSlamResultsRequest& ReceiveLocalSlamResultsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_ReceiveLocalSlamResultsRequest.base);
  return *internal_default_instance();
}


void ReceiveLocalSlamResultsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReceiveLocalSlamResultsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  return false;
#undef DO_
}

void ReceiveLocalSlamResultsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
}

::google::protobuf::uint8* ReceiveLocalSlamResultsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  return target;
}

size_t ReceiveLocalSlamResultsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceiveLocalSlamResultsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceiveLocalSlamResultsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReceiveLocalSlamResultsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
    MergeFrom(*source);
  }
}

void ReceiveLocalSlamResultsRequest::MergeFrom(const ReceiveLocalSlamResultsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void ReceiveLocalSlamResultsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveLocalSlamResultsRequest::CopyFrom(const ReceiveLocalSlamResultsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveLocalSlamResultsRequest::IsInitialized() const {
  return true;
}

void ReceiveLocalSlamResultsRequest::Swap(ReceiveLocalSlamResultsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReceiveLocalSlamResultsRequest::InternalSwap(ReceiveLocalSlamResultsRequest* other) {
  using std::swap;
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReceiveLocalSlamResultsRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocalSlamInsertionResult::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_LocalSlamInsertionResult_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::cartographer::mapping::proto::NodeId*>(
      ::cartographer::mapping::proto::NodeId::internal_default_instance());
}
void LocalSlamInsertionResult::clear_node_id() {
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) {
    delete node_id_;
  }
  node_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalSlamInsertionResult::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalSlamInsertionResult::LocalSlamInsertionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LocalSlamInsertionResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.LocalSlamInsertionResult)
}
LocalSlamInsertionResult::LocalSlamInsertionResult(const LocalSlamInsertionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_id()) {
    node_id_ = new ::cartographer::mapping::proto::NodeId(*from.node_id_);
  } else {
    node_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.LocalSlamInsertionResult)
}

void LocalSlamInsertionResult::SharedCtor() {
  node_id_ = NULL;
}

LocalSlamInsertionResult::~LocalSlamInsertionResult() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.LocalSlamInsertionResult)
  SharedDtor();
}

void LocalSlamInsertionResult::SharedDtor() {
  if (this != internal_default_instance()) delete node_id_;
}

void LocalSlamInsertionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocalSlamInsertionResult::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalSlamInsertionResult& LocalSlamInsertionResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LocalSlamInsertionResult.base);
  return *internal_default_instance();
}


void LocalSlamInsertionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) {
    delete node_id_;
  }
  node_id_ = NULL;
  _internal_metadata_.Clear();
}

bool LocalSlamInsertionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.NodeId node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.LocalSlamInsertionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.LocalSlamInsertionResult)
  return false;
#undef DO_
}

void LocalSlamInsertionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_node_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.LocalSlamInsertionResult)
}

::google::protobuf::uint8* LocalSlamInsertionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_node_id(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.LocalSlamInsertionResult)
  return target;
}

size_t LocalSlamInsertionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalSlamInsertionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalSlamInsertionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalSlamInsertionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.LocalSlamInsertionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.LocalSlamInsertionResult)
    MergeFrom(*source);
  }
}

void LocalSlamInsertionResult::MergeFrom(const LocalSlamInsertionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_id()) {
    mutable_node_id()->::cartographer::mapping::proto::NodeId::MergeFrom(from.node_id());
  }
}

void LocalSlamInsertionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalSlamInsertionResult::CopyFrom(const LocalSlamInsertionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalSlamInsertionResult::IsInitialized() const {
  return true;
}

void LocalSlamInsertionResult::Swap(LocalSlamInsertionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalSlamInsertionResult::InternalSwap(LocalSlamInsertionResult* other) {
  using std::swap;
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocalSlamInsertionResult::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReceiveLocalSlamResultsResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_ReceiveLocalSlamResultsResponse_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  ::cartographer::cloud::proto::_ReceiveLocalSlamResultsResponse_default_instance_._instance.get_mutable()->range_data_ = const_cast< ::cartographer::sensor::proto::RangeData*>(
      ::cartographer::sensor::proto::RangeData::internal_default_instance());
  ::cartographer::cloud::proto::_ReceiveLocalSlamResultsResponse_default_instance_._instance.get_mutable()->insertion_result_ = const_cast< ::cartographer::cloud::proto::LocalSlamInsertionResult*>(
      ::cartographer::cloud::proto::LocalSlamInsertionResult::internal_default_instance());
}
void ReceiveLocalSlamResultsResponse::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) {
    delete local_pose_;
  }
  local_pose_ = NULL;
}
void ReceiveLocalSlamResultsResponse::clear_range_data() {
  if (GetArenaNoVirtual() == NULL && range_data_ != NULL) {
    delete range_data_;
  }
  range_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReceiveLocalSlamResultsResponse::kTrajectoryIdFieldNumber;
const int ReceiveLocalSlamResultsResponse::kTimestampFieldNumber;
const int ReceiveLocalSlamResultsResponse::kLocalPoseFieldNumber;
const int ReceiveLocalSlamResultsResponse::kRangeDataFieldNumber;
const int ReceiveLocalSlamResultsResponse::kInsertionResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReceiveLocalSlamResultsResponse::ReceiveLocalSlamResultsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_ReceiveLocalSlamResultsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
}
ReceiveLocalSlamResultsResponse::ReceiveLocalSlamResultsResponse(const ReceiveLocalSlamResultsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = NULL;
  }
  if (from.has_range_data()) {
    range_data_ = new ::cartographer::sensor::proto::RangeData(*from.range_data_);
  } else {
    range_data_ = NULL;
  }
  if (from.has_insertion_result()) {
    insertion_result_ = new ::cartographer::cloud::proto::LocalSlamInsertionResult(*from.insertion_result_);
  } else {
    insertion_result_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(trajectory_id_));
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
}

void ReceiveLocalSlamResultsResponse::SharedCtor() {
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(trajectory_id_));
}

ReceiveLocalSlamResultsResponse::~ReceiveLocalSlamResultsResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  SharedDtor();
}

void ReceiveLocalSlamResultsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete local_pose_;
  if (this != internal_default_instance()) delete range_data_;
  if (this != internal_default_instance()) delete insertion_result_;
}

void ReceiveLocalSlamResultsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReceiveLocalSlamResultsResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReceiveLocalSlamResultsResponse& ReceiveLocalSlamResultsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_ReceiveLocalSlamResultsResponse.base);
  return *internal_default_instance();
}


void ReceiveLocalSlamResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) {
    delete local_pose_;
  }
  local_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_data_ != NULL) {
    delete range_data_;
  }
  range_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && insertion_result_ != NULL) {
    delete insertion_result_;
  }
  insertion_result_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(trajectory_id_));
  _internal_metadata_.Clear();
}

bool ReceiveLocalSlamResultsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d local_pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.RangeData range_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_range_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.cloud.proto.LocalSlamInsertionResult insertion_result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_insertion_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  return false;
#undef DO_
}

void ReceiveLocalSlamResultsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 3;
  if (this->has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_local_pose(), output);
  }

  // .cartographer.sensor.proto.RangeData range_data = 4;
  if (this->has_range_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_range_data(), output);
  }

  // .cartographer.cloud.proto.LocalSlamInsertionResult insertion_result = 5;
  if (this->has_insertion_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_insertion_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
}

::google::protobuf::uint8* ReceiveLocalSlamResultsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 3;
  if (this->has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_local_pose(), deterministic, target);
  }

  // .cartographer.sensor.proto.RangeData range_data = 4;
  if (this->has_range_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_range_data(), deterministic, target);
  }

  // .cartographer.cloud.proto.LocalSlamInsertionResult insertion_result = 5;
  if (this->has_insertion_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_insertion_result(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  return target;
}

size_t ReceiveLocalSlamResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d local_pose = 3;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // .cartographer.sensor.proto.RangeData range_data = 4;
  if (this->has_range_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *range_data_);
  }

  // .cartographer.cloud.proto.LocalSlamInsertionResult insertion_result = 5;
  if (this->has_insertion_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *insertion_result_);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceiveLocalSlamResultsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceiveLocalSlamResultsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReceiveLocalSlamResultsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
    MergeFrom(*source);
  }
}

void ReceiveLocalSlamResultsResponse::MergeFrom(const ReceiveLocalSlamResultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose()) {
    mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
  }
  if (from.has_range_data()) {
    mutable_range_data()->::cartographer::sensor::proto::RangeData::MergeFrom(from.range_data());
  }
  if (from.has_insertion_result()) {
    mutable_insertion_result()->::cartographer::cloud::proto::LocalSlamInsertionResult::MergeFrom(from.insertion_result());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void ReceiveLocalSlamResultsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveLocalSlamResultsResponse::CopyFrom(const ReceiveLocalSlamResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveLocalSlamResultsResponse::IsInitialized() const {
  return true;
}

void ReceiveLocalSlamResultsResponse::Swap(ReceiveLocalSlamResultsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReceiveLocalSlamResultsResponse::InternalSwap(ReceiveLocalSlamResultsResponse* other) {
  using std::swap;
  swap(local_pose_, other->local_pose_);
  swap(range_data_, other->range_data_);
  swap(insertion_result_, other->insertion_result_);
  swap(timestamp_, other->timestamp_);
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReceiveLocalSlamResultsResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse() {}
ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::MergeFrom(const ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[16];
}
void ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse() {}
ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::MergeFrom(const ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[17];
}
void ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void ReceiveGlobalSlamOptimizationsResponse::InitAsDefaultInstance() {
}
void ReceiveGlobalSlamOptimizationsResponse::clear_last_optimized_node_ids() {
  last_optimized_node_ids_.Clear();
}
void ReceiveGlobalSlamOptimizationsResponse::clear_last_optimized_submap_ids() {
  last_optimized_submap_ids_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReceiveGlobalSlamOptimizationsResponse::kLastOptimizedNodeIdsFieldNumber;
const int ReceiveGlobalSlamOptimizationsResponse::kLastOptimizedSubmapIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReceiveGlobalSlamOptimizationsResponse::ReceiveGlobalSlamOptimizationsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_ReceiveGlobalSlamOptimizationsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
}
ReceiveGlobalSlamOptimizationsResponse::ReceiveGlobalSlamOptimizationsResponse(const ReceiveGlobalSlamOptimizationsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_optimized_node_ids_.MergeFrom(from.last_optimized_node_ids_);
  last_optimized_submap_ids_.MergeFrom(from.last_optimized_submap_ids_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
}

void ReceiveGlobalSlamOptimizationsResponse::SharedCtor() {
}

ReceiveGlobalSlamOptimizationsResponse::~ReceiveGlobalSlamOptimizationsResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  SharedDtor();
}

void ReceiveGlobalSlamOptimizationsResponse::SharedDtor() {
}

void ReceiveGlobalSlamOptimizationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReceiveGlobalSlamOptimizationsResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReceiveGlobalSlamOptimizationsResponse& ReceiveGlobalSlamOptimizationsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_ReceiveGlobalSlamOptimizationsResponse.base);
  return *internal_default_instance();
}


void ReceiveGlobalSlamOptimizationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_optimized_node_ids_.Clear();
  last_optimized_submap_ids_.Clear();
  _internal_metadata_.Clear();
}

bool ReceiveGlobalSlamOptimizationsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .cartographer.mapping.proto.NodeId> last_optimized_node_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse,
              ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId > > parser(&last_optimized_node_ids_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .cartographer.mapping.proto.SubmapId> last_optimized_submap_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse,
              ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId > > parser(&last_optimized_submap_ids_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  return false;
#undef DO_
}

void ReceiveGlobalSlamOptimizationsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .cartographer.mapping.proto.NodeId> last_optimized_node_ids = 1;
  if (!this->last_optimized_node_ids().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->last_optimized_node_ids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->last_optimized_node_ids().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId >::const_iterator
          it = this->last_optimized_node_ids().begin();
          it != this->last_optimized_node_ids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(last_optimized_node_ids_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::std::unique_ptr<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId >::const_iterator
          it = this->last_optimized_node_ids().begin();
          it != this->last_optimized_node_ids().end(); ++it) {
        entry.reset(last_optimized_node_ids_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // map<int32, .cartographer.mapping.proto.SubmapId> last_optimized_submap_ids = 2;
  if (!this->last_optimized_submap_ids().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->last_optimized_submap_ids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->last_optimized_submap_ids().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId >::const_iterator
          it = this->last_optimized_submap_ids().begin();
          it != this->last_optimized_submap_ids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(last_optimized_submap_ids_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::std::unique_ptr<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId >::const_iterator
          it = this->last_optimized_submap_ids().begin();
          it != this->last_optimized_submap_ids().end(); ++it) {
        entry.reset(last_optimized_submap_ids_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
}

::google::protobuf::uint8* ReceiveGlobalSlamOptimizationsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .cartographer.mapping.proto.NodeId> last_optimized_node_ids = 1;
  if (!this->last_optimized_node_ids().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->last_optimized_node_ids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->last_optimized_node_ids().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId >::const_iterator
          it = this->last_optimized_node_ids().begin();
          it != this->last_optimized_node_ids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(last_optimized_node_ids_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId >::const_iterator
          it = this->last_optimized_node_ids().begin();
          it != this->last_optimized_node_ids().end(); ++it) {
        entry.reset(last_optimized_node_ids_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, .cartographer.mapping.proto.SubmapId> last_optimized_submap_ids = 2;
  if (!this->last_optimized_submap_ids().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->last_optimized_submap_ids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->last_optimized_submap_ids().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId >::const_iterator
          it = this->last_optimized_submap_ids().begin();
          it != this->last_optimized_submap_ids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(last_optimized_submap_ids_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId >::const_iterator
          it = this->last_optimized_submap_ids().begin();
          it != this->last_optimized_submap_ids().end(); ++it) {
        entry.reset(last_optimized_submap_ids_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  return target;
}

size_t ReceiveGlobalSlamOptimizationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .cartographer.mapping.proto.NodeId> last_optimized_node_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->last_optimized_node_ids_size());
  {
    ::std::unique_ptr<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::NodeId >::const_iterator
        it = this->last_optimized_node_ids().begin();
        it != this->last_optimized_node_ids().end(); ++it) {
      entry.reset(last_optimized_node_ids_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .cartographer.mapping.proto.SubmapId> last_optimized_submap_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->last_optimized_submap_ids_size());
  {
    ::std::unique_ptr<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::mapping::proto::SubmapId >::const_iterator
        it = this->last_optimized_submap_ids().begin();
        it != this->last_optimized_submap_ids().end(); ++it) {
      entry.reset(last_optimized_submap_ids_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceiveGlobalSlamOptimizationsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceiveGlobalSlamOptimizationsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReceiveGlobalSlamOptimizationsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
    MergeFrom(*source);
  }
}

void ReceiveGlobalSlamOptimizationsResponse::MergeFrom(const ReceiveGlobalSlamOptimizationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  last_optimized_node_ids_.MergeFrom(from.last_optimized_node_ids_);
  last_optimized_submap_ids_.MergeFrom(from.last_optimized_submap_ids_);
}

void ReceiveGlobalSlamOptimizationsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveGlobalSlamOptimizationsResponse::CopyFrom(const ReceiveGlobalSlamOptimizationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveGlobalSlamOptimizationsResponse::IsInitialized() const {
  return true;
}

void ReceiveGlobalSlamOptimizationsResponse::Swap(ReceiveGlobalSlamOptimizationsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReceiveGlobalSlamOptimizationsResponse::InternalSwap(ReceiveGlobalSlamOptimizationsResponse* other) {
  using std::swap;
  last_optimized_node_ids_.Swap(&other->last_optimized_node_ids_);
  last_optimized_submap_ids_.Swap(&other->last_optimized_submap_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReceiveGlobalSlamOptimizationsResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSubmapRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_GetSubmapRequest_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(
      ::cartographer::mapping::proto::SubmapId::internal_default_instance());
}
void GetSubmapRequest::clear_submap_id() {
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) {
    delete submap_id_;
  }
  submap_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSubmapRequest::kSubmapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSubmapRequest::GetSubmapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetSubmapRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetSubmapRequest)
}
GetSubmapRequest::GetSubmapRequest(const GetSubmapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetSubmapRequest)
}

void GetSubmapRequest::SharedCtor() {
  submap_id_ = NULL;
}

GetSubmapRequest::~GetSubmapRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetSubmapRequest)
  SharedDtor();
}

void GetSubmapRequest::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
}

void GetSubmapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSubmapRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSubmapRequest& GetSubmapRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetSubmapRequest.base);
  return *internal_default_instance();
}


void GetSubmapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetSubmapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) {
    delete submap_id_;
  }
  submap_id_ = NULL;
  _internal_metadata_.Clear();
}

bool GetSubmapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.GetSubmapRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.GetSubmapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.GetSubmapRequest)
  return false;
#undef DO_
}

void GetSubmapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.GetSubmapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_submap_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.GetSubmapRequest)
}

::google::protobuf::uint8* GetSubmapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetSubmapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_submap_id(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetSubmapRequest)
  return target;
}

size_t GetSubmapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetSubmapRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submap_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubmapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetSubmapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubmapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSubmapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetSubmapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetSubmapRequest)
    MergeFrom(*source);
  }
}

void GetSubmapRequest::MergeFrom(const GetSubmapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetSubmapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap_id()) {
    mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from.submap_id());
  }
}

void GetSubmapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetSubmapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubmapRequest::CopyFrom(const GetSubmapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetSubmapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubmapRequest::IsInitialized() const {
  return true;
}

void GetSubmapRequest::Swap(GetSubmapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSubmapRequest::InternalSwap(GetSubmapRequest* other) {
  using std::swap;
  swap(submap_id_, other->submap_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSubmapRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoadStateRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_LoadStateRequest_default_instance_.serialized_data_ = const_cast< ::cartographer::mapping::proto::SerializedData*>(
      ::cartographer::mapping::proto::SerializedData::internal_default_instance());
  ::cartographer::cloud::proto::_LoadStateRequest_default_instance_.serialization_header_ = const_cast< ::cartographer::mapping::proto::SerializationHeader*>(
      ::cartographer::mapping::proto::SerializationHeader::internal_default_instance());
  ::cartographer::cloud::proto::_LoadStateRequest_default_instance_.client_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoadStateRequest::set_allocated_serialized_data(::cartographer::mapping::proto::SerializedData* serialized_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_state_chunk();
  if (serialized_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serialized_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serialized_data, submessage_arena);
    }
    set_has_serialized_data();
    state_chunk_.serialized_data_ = serialized_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.LoadStateRequest.serialized_data)
}
void LoadStateRequest::clear_serialized_data() {
  if (has_serialized_data()) {
    delete state_chunk_.serialized_data_;
    clear_has_state_chunk();
  }
}
void LoadStateRequest::set_allocated_serialization_header(::cartographer::mapping::proto::SerializationHeader* serialization_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_state_chunk();
  if (serialization_header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serialization_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serialization_header, submessage_arena);
    }
    set_has_serialization_header();
    state_chunk_.serialization_header_ = serialization_header;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.LoadStateRequest.serialization_header)
}
void LoadStateRequest::clear_serialization_header() {
  if (has_serialization_header()) {
    delete state_chunk_.serialization_header_;
    clear_has_state_chunk();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadStateRequest::kSerializedDataFieldNumber;
const int LoadStateRequest::kSerializationHeaderFieldNumber;
const int LoadStateRequest::kClientIdFieldNumber;
const int LoadStateRequest::kLoadFrozenStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadStateRequest::LoadStateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LoadStateRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.LoadStateRequest)
}
LoadStateRequest::LoadStateRequest(const LoadStateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  load_frozen_state_ = from.load_frozen_state_;
  clear_has_state_chunk();
  switch (from.state_chunk_case()) {
    case kSerializedData: {
      mutable_serialized_data()->::cartographer::mapping::proto::SerializedData::MergeFrom(from.serialized_data());
      break;
    }
    case kSerializationHeader: {
      mutable_serialization_header()->::cartographer::mapping::proto::SerializationHeader::MergeFrom(from.serialization_header());
      break;
    }
    case kClientId: {
      set_client_id(from.client_id());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.LoadStateRequest)
}

void LoadStateRequest::SharedCtor() {
  load_frozen_state_ = false;
  clear_has_state_chunk();
}

LoadStateRequest::~LoadStateRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.LoadStateRequest)
  SharedDtor();
}

void LoadStateRequest::SharedDtor() {
  if (has_state_chunk()) {
    clear_state_chunk();
  }
}

void LoadStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoadStateRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoadStateRequest& LoadStateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LoadStateRequest.base);
  return *internal_default_instance();
}


void LoadStateRequest::clear_state_chunk() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.cloud.proto.LoadStateRequest)
  switch (state_chunk_case()) {
    case kSerializedData: {
      delete state_chunk_.serialized_data_;
      break;
    }
    case kSerializationHeader: {
      delete state_chunk_.serialization_header_;
      break;
    }
    case kClientId: {
      state_chunk_.client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_CHUNK_NOT_SET;
}


void LoadStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.LoadStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_frozen_state_ = false;
  clear_state_chunk();
  _internal_metadata_.Clear();
}

bool LoadStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.LoadStateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SerializedData serialized_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serialized_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.SerializationHeader serialization_header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serialization_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.LoadStateRequest.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool load_frozen_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &load_frozen_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.LoadStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.LoadStateRequest)
  return false;
#undef DO_
}

void LoadStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.LoadStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SerializedData serialized_data = 1;
  if (has_serialized_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_serialized_data(), output);
  }

  // .cartographer.mapping.proto.SerializationHeader serialization_header = 2;
  if (has_serialization_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_serialization_header(), output);
  }

  // string client_id = 3;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.LoadStateRequest.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_id(), output);
  }

  // bool load_frozen_state = 4;
  if (this->load_frozen_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->load_frozen_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.LoadStateRequest)
}

::google::protobuf::uint8* LoadStateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.LoadStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SerializedData serialized_data = 1;
  if (has_serialized_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_serialized_data(), deterministic, target);
  }

  // .cartographer.mapping.proto.SerializationHeader serialization_header = 2;
  if (has_serialization_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_serialization_header(), deterministic, target);
  }

  // string client_id = 3;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.LoadStateRequest.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_id(), target);
  }

  // bool load_frozen_state = 4;
  if (this->load_frozen_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->load_frozen_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.LoadStateRequest)
  return target;
}

size_t LoadStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.LoadStateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool load_frozen_state = 4;
  if (this->load_frozen_state() != 0) {
    total_size += 1 + 1;
  }

  switch (state_chunk_case()) {
    // .cartographer.mapping.proto.SerializedData serialized_data = 1;
    case kSerializedData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_chunk_.serialized_data_);
      break;
    }
    // .cartographer.mapping.proto.SerializationHeader serialization_header = 2;
    case kSerializationHeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_chunk_.serialization_header_);
      break;
    }
    // string client_id = 3;
    case kClientId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.LoadStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadStateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadStateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.LoadStateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.LoadStateRequest)
    MergeFrom(*source);
  }
}

void LoadStateRequest::MergeFrom(const LoadStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.LoadStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.load_frozen_state() != 0) {
    set_load_frozen_state(from.load_frozen_state());
  }
  switch (from.state_chunk_case()) {
    case kSerializedData: {
      mutable_serialized_data()->::cartographer::mapping::proto::SerializedData::MergeFrom(from.serialized_data());
      break;
    }
    case kSerializationHeader: {
      mutable_serialization_header()->::cartographer::mapping::proto::SerializationHeader::MergeFrom(from.serialization_header());
      break;
    }
    case kClientId: {
      set_client_id(from.client_id());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
}

void LoadStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.LoadStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadStateRequest::CopyFrom(const LoadStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.LoadStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadStateRequest::IsInitialized() const {
  return true;
}

void LoadStateRequest::Swap(LoadStateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadStateRequest::InternalSwap(LoadStateRequest* other) {
  using std::swap;
  swap(load_frozen_state_, other->load_frozen_state_);
  swap(state_chunk_, other->state_chunk_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoadStateRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse() {}
TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::MergeFrom(const TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[21];
}
void TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TrajectoryRemapping::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryRemapping::kSerializedTrajectoriesToTrajectoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryRemapping::TrajectoryRemapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryRemapping.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.TrajectoryRemapping)
}
TrajectoryRemapping::TrajectoryRemapping(const TrajectoryRemapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialized_trajectories_to_trajectories_.MergeFrom(from.serialized_trajectories_to_trajectories_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.TrajectoryRemapping)
}

void TrajectoryRemapping::SharedCtor() {
}

TrajectoryRemapping::~TrajectoryRemapping() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.TrajectoryRemapping)
  SharedDtor();
}

void TrajectoryRemapping::SharedDtor() {
}

void TrajectoryRemapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryRemapping::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryRemapping& TrajectoryRemapping::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryRemapping.base);
  return *internal_default_instance();
}


void TrajectoryRemapping::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.TrajectoryRemapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serialized_trajectories_to_trajectories_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryRemapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.TrajectoryRemapping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, int32> serialized_trajectories_to_trajectories = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse,
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&serialized_trajectories_to_trajectories_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.TrajectoryRemapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.TrajectoryRemapping)
  return false;
#undef DO_
}

void TrajectoryRemapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.TrajectoryRemapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> serialized_trajectories_to_trajectories = 1;
  if (!this->serialized_trajectories_to_trajectories().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->serialized_trajectories_to_trajectories().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->serialized_trajectories_to_trajectories().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->serialized_trajectories_to_trajectories().begin();
          it != this->serialized_trajectories_to_trajectories().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(serialized_trajectories_to_trajectories_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::std::unique_ptr<TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->serialized_trajectories_to_trajectories().begin();
          it != this->serialized_trajectories_to_trajectories().end(); ++it) {
        entry.reset(serialized_trajectories_to_trajectories_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.TrajectoryRemapping)
}

::google::protobuf::uint8* TrajectoryRemapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.TrajectoryRemapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> serialized_trajectories_to_trajectories = 1;
  if (!this->serialized_trajectories_to_trajectories().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->serialized_trajectories_to_trajectories().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->serialized_trajectories_to_trajectories().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->serialized_trajectories_to_trajectories().begin();
          it != this->serialized_trajectories_to_trajectories().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(serialized_trajectories_to_trajectories_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->serialized_trajectories_to_trajectories().begin();
          it != this->serialized_trajectories_to_trajectories().end(); ++it) {
        entry.reset(serialized_trajectories_to_trajectories_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.TrajectoryRemapping)
  return target;
}

size_t TrajectoryRemapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.TrajectoryRemapping)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, int32> serialized_trajectories_to_trajectories = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->serialized_trajectories_to_trajectories_size());
  {
    ::std::unique_ptr<TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->serialized_trajectories_to_trajectories().begin();
        it != this->serialized_trajectories_to_trajectories().end(); ++it) {
      entry.reset(serialized_trajectories_to_trajectories_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryRemapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.TrajectoryRemapping)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryRemapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryRemapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.TrajectoryRemapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.TrajectoryRemapping)
    MergeFrom(*source);
  }
}

void TrajectoryRemapping::MergeFrom(const TrajectoryRemapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.TrajectoryRemapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  serialized_trajectories_to_trajectories_.MergeFrom(from.serialized_trajectories_to_trajectories_);
}

void TrajectoryRemapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.TrajectoryRemapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryRemapping::CopyFrom(const TrajectoryRemapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.TrajectoryRemapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryRemapping::IsInitialized() const {
  return true;
}

void TrajectoryRemapping::Swap(TrajectoryRemapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryRemapping::InternalSwap(TrajectoryRemapping* other) {
  using std::swap;
  serialized_trajectories_to_trajectories_.Swap(&other->serialized_trajectories_to_trajectories_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryRemapping::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoadStateResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_LoadStateResponse_default_instance_._instance.get_mutable()->trajectory_remapping_ = const_cast< ::cartographer::cloud::proto::TrajectoryRemapping*>(
      ::cartographer::cloud::proto::TrajectoryRemapping::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadStateResponse::kTrajectoryRemappingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadStateResponse::LoadStateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LoadStateResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.LoadStateResponse)
}
LoadStateResponse::LoadStateResponse(const LoadStateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_remapping()) {
    trajectory_remapping_ = new ::cartographer::cloud::proto::TrajectoryRemapping(*from.trajectory_remapping_);
  } else {
    trajectory_remapping_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.LoadStateResponse)
}

void LoadStateResponse::SharedCtor() {
  trajectory_remapping_ = NULL;
}

LoadStateResponse::~LoadStateResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.LoadStateResponse)
  SharedDtor();
}

void LoadStateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_remapping_;
}

void LoadStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoadStateResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoadStateResponse& LoadStateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LoadStateResponse.base);
  return *internal_default_instance();
}


void LoadStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.LoadStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && trajectory_remapping_ != NULL) {
    delete trajectory_remapping_;
  }
  trajectory_remapping_ = NULL;
  _internal_metadata_.Clear();
}

bool LoadStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.LoadStateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_remapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.LoadStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.LoadStateResponse)
  return false;
#undef DO_
}

void LoadStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.LoadStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
  if (this->has_trajectory_remapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_trajectory_remapping(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.LoadStateResponse)
}

::google::protobuf::uint8* LoadStateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.LoadStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
  if (this->has_trajectory_remapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_trajectory_remapping(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.LoadStateResponse)
  return target;
}

size_t LoadStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.LoadStateResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
  if (this->has_trajectory_remapping()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_remapping_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.LoadStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadStateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadStateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.LoadStateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.LoadStateResponse)
    MergeFrom(*source);
  }
}

void LoadStateResponse::MergeFrom(const LoadStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.LoadStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_remapping()) {
    mutable_trajectory_remapping()->::cartographer::cloud::proto::TrajectoryRemapping::MergeFrom(from.trajectory_remapping());
  }
}

void LoadStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.LoadStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadStateResponse::CopyFrom(const LoadStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.LoadStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadStateResponse::IsInitialized() const {
  return true;
}

void LoadStateResponse::Swap(LoadStateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadStateResponse::InternalSwap(LoadStateResponse* other) {
  using std::swap;
  swap(trajectory_remapping_, other->trajectory_remapping_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoadStateResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoadStateFromFileRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadStateFromFileRequest::kFilePathFieldNumber;
const int LoadStateFromFileRequest::kClientIdFieldNumber;
const int LoadStateFromFileRequest::kLoadFrozenStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadStateFromFileRequest::LoadStateFromFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LoadStateFromFileRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.LoadStateFromFileRequest)
}
LoadStateFromFileRequest::LoadStateFromFileRequest(const LoadStateFromFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  load_frozen_state_ = from.load_frozen_state_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.LoadStateFromFileRequest)
}

void LoadStateFromFileRequest::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load_frozen_state_ = false;
}

LoadStateFromFileRequest::~LoadStateFromFileRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.LoadStateFromFileRequest)
  SharedDtor();
}

void LoadStateFromFileRequest::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoadStateFromFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoadStateFromFileRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoadStateFromFileRequest& LoadStateFromFileRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LoadStateFromFileRequest.base);
  return *internal_default_instance();
}


void LoadStateFromFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load_frozen_state_ = false;
  _internal_metadata_.Clear();
}

bool LoadStateFromFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), static_cast<int>(this->file_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.LoadStateFromFileRequest.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.LoadStateFromFileRequest.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool load_frozen_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &load_frozen_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.LoadStateFromFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.LoadStateFromFileRequest)
  return false;
#undef DO_
}

void LoadStateFromFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.LoadStateFromFileRequest.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.LoadStateFromFileRequest.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // bool load_frozen_state = 3;
  if (this->load_frozen_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->load_frozen_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.LoadStateFromFileRequest)
}

::google::protobuf::uint8* LoadStateFromFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.LoadStateFromFileRequest.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.LoadStateFromFileRequest.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // bool load_frozen_state = 3;
  if (this->load_frozen_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->load_frozen_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.LoadStateFromFileRequest)
  return target;
}

size_t LoadStateFromFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // bool load_frozen_state = 3;
  if (this->load_frozen_state() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadStateFromFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadStateFromFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadStateFromFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.LoadStateFromFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.LoadStateFromFileRequest)
    MergeFrom(*source);
  }
}

void LoadStateFromFileRequest::MergeFrom(const LoadStateFromFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.load_frozen_state() != 0) {
    set_load_frozen_state(from.load_frozen_state());
  }
}

void LoadStateFromFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadStateFromFileRequest::CopyFrom(const LoadStateFromFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadStateFromFileRequest::IsInitialized() const {
  return true;
}

void LoadStateFromFileRequest::Swap(LoadStateFromFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadStateFromFileRequest::InternalSwap(LoadStateFromFileRequest* other) {
  using std::swap;
  file_path_.Swap(&other->file_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(load_frozen_state_, other->load_frozen_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoadStateFromFileRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoadStateFromFileResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_LoadStateFromFileResponse_default_instance_._instance.get_mutable()->trajectory_remapping_ = const_cast< ::cartographer::cloud::proto::TrajectoryRemapping*>(
      ::cartographer::cloud::proto::TrajectoryRemapping::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadStateFromFileResponse::kTrajectoryRemappingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadStateFromFileResponse::LoadStateFromFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LoadStateFromFileResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.LoadStateFromFileResponse)
}
LoadStateFromFileResponse::LoadStateFromFileResponse(const LoadStateFromFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_remapping()) {
    trajectory_remapping_ = new ::cartographer::cloud::proto::TrajectoryRemapping(*from.trajectory_remapping_);
  } else {
    trajectory_remapping_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.LoadStateFromFileResponse)
}

void LoadStateFromFileResponse::SharedCtor() {
  trajectory_remapping_ = NULL;
}

LoadStateFromFileResponse::~LoadStateFromFileResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.LoadStateFromFileResponse)
  SharedDtor();
}

void LoadStateFromFileResponse::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_remapping_;
}

void LoadStateFromFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoadStateFromFileResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoadStateFromFileResponse& LoadStateFromFileResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_LoadStateFromFileResponse.base);
  return *internal_default_instance();
}


void LoadStateFromFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && trajectory_remapping_ != NULL) {
    delete trajectory_remapping_;
  }
  trajectory_remapping_ = NULL;
  _internal_metadata_.Clear();
}

bool LoadStateFromFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_remapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.LoadStateFromFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.LoadStateFromFileResponse)
  return false;
#undef DO_
}

void LoadStateFromFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
  if (this->has_trajectory_remapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_trajectory_remapping(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.LoadStateFromFileResponse)
}

::google::protobuf::uint8* LoadStateFromFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
  if (this->has_trajectory_remapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_trajectory_remapping(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.LoadStateFromFileResponse)
  return target;
}

size_t LoadStateFromFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
  if (this->has_trajectory_remapping()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_remapping_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadStateFromFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadStateFromFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadStateFromFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.LoadStateFromFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.LoadStateFromFileResponse)
    MergeFrom(*source);
  }
}

void LoadStateFromFileResponse::MergeFrom(const LoadStateFromFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_remapping()) {
    mutable_trajectory_remapping()->::cartographer::cloud::proto::TrajectoryRemapping::MergeFrom(from.trajectory_remapping());
  }
}

void LoadStateFromFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadStateFromFileResponse::CopyFrom(const LoadStateFromFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadStateFromFileResponse::IsInitialized() const {
  return true;
}

void LoadStateFromFileResponse::Swap(LoadStateFromFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadStateFromFileResponse::InternalSwap(LoadStateFromFileResponse* other) {
  using std::swap;
  swap(trajectory_remapping_, other->trajectory_remapping_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoadStateFromFileResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSubmapResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_GetSubmapResponse_default_instance_._instance.get_mutable()->submap_query_response_ = const_cast< ::cartographer::mapping::proto::SubmapQuery_Response*>(
      ::cartographer::mapping::proto::SubmapQuery_Response::internal_default_instance());
}
void GetSubmapResponse::clear_submap_query_response() {
  if (GetArenaNoVirtual() == NULL && submap_query_response_ != NULL) {
    delete submap_query_response_;
  }
  submap_query_response_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSubmapResponse::kSubmapQueryResponseFieldNumber;
const int GetSubmapResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSubmapResponse::GetSubmapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetSubmapResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetSubmapResponse)
}
GetSubmapResponse::GetSubmapResponse(const GetSubmapResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.has_submap_query_response()) {
    submap_query_response_ = new ::cartographer::mapping::proto::SubmapQuery_Response(*from.submap_query_response_);
  } else {
    submap_query_response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetSubmapResponse)
}

void GetSubmapResponse::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submap_query_response_ = NULL;
}

GetSubmapResponse::~GetSubmapResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetSubmapResponse)
  SharedDtor();
}

void GetSubmapResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete submap_query_response_;
}

void GetSubmapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSubmapResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSubmapResponse& GetSubmapResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetSubmapResponse.base);
  return *internal_default_instance();
}


void GetSubmapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetSubmapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && submap_query_response_ != NULL) {
    delete submap_query_response_;
  }
  submap_query_response_ = NULL;
  _internal_metadata_.Clear();
}

bool GetSubmapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.GetSubmapResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SubmapQuery.Response submap_query_response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submap_query_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.GetSubmapResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.GetSubmapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.GetSubmapResponse)
  return false;
#undef DO_
}

void GetSubmapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.GetSubmapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapQuery.Response submap_query_response = 1;
  if (this->has_submap_query_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_submap_query_response(), output);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.GetSubmapResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.GetSubmapResponse)
}

::google::protobuf::uint8* GetSubmapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetSubmapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapQuery.Response submap_query_response = 1;
  if (this->has_submap_query_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_submap_query_response(), deterministic, target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.GetSubmapResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetSubmapResponse)
  return target;
}

size_t GetSubmapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetSubmapResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // .cartographer.mapping.proto.SubmapQuery.Response submap_query_response = 1;
  if (this->has_submap_query_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submap_query_response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubmapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetSubmapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubmapResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSubmapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetSubmapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetSubmapResponse)
    MergeFrom(*source);
  }
}

void GetSubmapResponse::MergeFrom(const GetSubmapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetSubmapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.has_submap_query_response()) {
    mutable_submap_query_response()->::cartographer::mapping::proto::SubmapQuery_Response::MergeFrom(from.submap_query_response());
  }
}

void GetSubmapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetSubmapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubmapResponse::CopyFrom(const GetSubmapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetSubmapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubmapResponse::IsInitialized() const {
  return true;
}

void GetSubmapResponse::Swap(GetSubmapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSubmapResponse::InternalSwap(GetSubmapResponse* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(submap_query_response_, other->submap_query_response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSubmapResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryNodePose_ConstantPoseData::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_TrajectoryNodePose_ConstantPoseData_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
void TrajectoryNodePose_ConstantPoseData::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) {
    delete local_pose_;
  }
  local_pose_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryNodePose_ConstantPoseData::kTimestampFieldNumber;
const int TrajectoryNodePose_ConstantPoseData::kLocalPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryNodePose_ConstantPoseData::TrajectoryNodePose_ConstantPoseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryNodePose_ConstantPoseData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
}
TrajectoryNodePose_ConstantPoseData::TrajectoryNodePose_ConstantPoseData(const TrajectoryNodePose_ConstantPoseData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
}

void TrajectoryNodePose_ConstantPoseData::SharedCtor() {
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(timestamp_));
}

TrajectoryNodePose_ConstantPoseData::~TrajectoryNodePose_ConstantPoseData() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  SharedDtor();
}

void TrajectoryNodePose_ConstantPoseData::SharedDtor() {
  if (this != internal_default_instance()) delete local_pose_;
}

void TrajectoryNodePose_ConstantPoseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryNodePose_ConstantPoseData::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryNodePose_ConstantPoseData& TrajectoryNodePose_ConstantPoseData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryNodePose_ConstantPoseData.base);
  return *internal_default_instance();
}


void TrajectoryNodePose_ConstantPoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) {
    delete local_pose_;
  }
  local_pose_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool TrajectoryNodePose_ConstantPoseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d local_pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  return false;
#undef DO_
}

void TrajectoryNodePose_ConstantPoseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 2;
  if (this->has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_local_pose(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
}

::google::protobuf::uint8* TrajectoryNodePose_ConstantPoseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 2;
  if (this->has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_local_pose(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  return target;
}

size_t TrajectoryNodePose_ConstantPoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d local_pose = 2;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryNodePose_ConstantPoseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryNodePose_ConstantPoseData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryNodePose_ConstantPoseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
    MergeFrom(*source);
  }
}

void TrajectoryNodePose_ConstantPoseData::MergeFrom(const TrajectoryNodePose_ConstantPoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose()) {
    mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void TrajectoryNodePose_ConstantPoseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryNodePose_ConstantPoseData::CopyFrom(const TrajectoryNodePose_ConstantPoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryNodePose_ConstantPoseData::IsInitialized() const {
  return true;
}

void TrajectoryNodePose_ConstantPoseData::Swap(TrajectoryNodePose_ConstantPoseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryNodePose_ConstantPoseData::InternalSwap(TrajectoryNodePose_ConstantPoseData* other) {
  using std::swap;
  swap(local_pose_, other->local_pose_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryNodePose_ConstantPoseData::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryNodePose::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_TrajectoryNodePose_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::cartographer::mapping::proto::NodeId*>(
      ::cartographer::mapping::proto::NodeId::internal_default_instance());
  ::cartographer::cloud::proto::_TrajectoryNodePose_default_instance_._instance.get_mutable()->global_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  ::cartographer::cloud::proto::_TrajectoryNodePose_default_instance_._instance.get_mutable()->constant_pose_data_ = const_cast< ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData*>(
      ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData::internal_default_instance());
}
void TrajectoryNodePose::clear_node_id() {
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) {
    delete node_id_;
  }
  node_id_ = NULL;
}
void TrajectoryNodePose::clear_global_pose() {
  if (GetArenaNoVirtual() == NULL && global_pose_ != NULL) {
    delete global_pose_;
  }
  global_pose_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryNodePose::kNodeIdFieldNumber;
const int TrajectoryNodePose::kGlobalPoseFieldNumber;
const int TrajectoryNodePose::kConstantPoseDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryNodePose::TrajectoryNodePose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryNodePose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.TrajectoryNodePose)
}
TrajectoryNodePose::TrajectoryNodePose(const TrajectoryNodePose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_id()) {
    node_id_ = new ::cartographer::mapping::proto::NodeId(*from.node_id_);
  } else {
    node_id_ = NULL;
  }
  if (from.has_global_pose()) {
    global_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.global_pose_);
  } else {
    global_pose_ = NULL;
  }
  if (from.has_constant_pose_data()) {
    constant_pose_data_ = new ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData(*from.constant_pose_data_);
  } else {
    constant_pose_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.TrajectoryNodePose)
}

void TrajectoryNodePose::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constant_pose_data_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(constant_pose_data_));
}

TrajectoryNodePose::~TrajectoryNodePose() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.TrajectoryNodePose)
  SharedDtor();
}

void TrajectoryNodePose::SharedDtor() {
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete global_pose_;
  if (this != internal_default_instance()) delete constant_pose_data_;
}

void TrajectoryNodePose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryNodePose::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryNodePose& TrajectoryNodePose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_TrajectoryNodePose.base);
  return *internal_default_instance();
}


void TrajectoryNodePose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.TrajectoryNodePose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) {
    delete node_id_;
  }
  node_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && global_pose_ != NULL) {
    delete global_pose_;
  }
  global_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && constant_pose_data_ != NULL) {
    delete constant_pose_data_;
  }
  constant_pose_data_ = NULL;
  _internal_metadata_.Clear();
}

bool TrajectoryNodePose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.TrajectoryNodePose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.NodeId node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d global_pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData constant_pose_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constant_pose_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.TrajectoryNodePose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.TrajectoryNodePose)
  return false;
#undef DO_
}

void TrajectoryNodePose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.TrajectoryNodePose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_node_id(), output);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_global_pose(), output);
  }

  // .cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData constant_pose_data = 3;
  if (this->has_constant_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_constant_pose_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.TrajectoryNodePose)
}

::google::protobuf::uint8* TrajectoryNodePose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.TrajectoryNodePose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_node_id(), deterministic, target);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_global_pose(), deterministic, target);
  }

  // .cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData constant_pose_data = 3;
  if (this->has_constant_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_constant_pose_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.TrajectoryNodePose)
  return target;
}

size_t TrajectoryNodePose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.TrajectoryNodePose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *global_pose_);
  }

  // .cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData constant_pose_data = 3;
  if (this->has_constant_pose_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constant_pose_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryNodePose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.TrajectoryNodePose)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryNodePose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryNodePose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.TrajectoryNodePose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.TrajectoryNodePose)
    MergeFrom(*source);
  }
}

void TrajectoryNodePose::MergeFrom(const TrajectoryNodePose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.TrajectoryNodePose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_id()) {
    mutable_node_id()->::cartographer::mapping::proto::NodeId::MergeFrom(from.node_id());
  }
  if (from.has_global_pose()) {
    mutable_global_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.global_pose());
  }
  if (from.has_constant_pose_data()) {
    mutable_constant_pose_data()->::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData::MergeFrom(from.constant_pose_data());
  }
}

void TrajectoryNodePose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.TrajectoryNodePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryNodePose::CopyFrom(const TrajectoryNodePose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.TrajectoryNodePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryNodePose::IsInitialized() const {
  return true;
}

void TrajectoryNodePose::Swap(TrajectoryNodePose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryNodePose::InternalSwap(TrajectoryNodePose* other) {
  using std::swap;
  swap(node_id_, other->node_id_);
  swap(global_pose_, other->global_pose_);
  swap(constant_pose_data_, other->constant_pose_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryNodePose::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTrajectoryNodePosesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTrajectoryNodePosesResponse::kNodePosesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTrajectoryNodePosesResponse::GetTrajectoryNodePosesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetTrajectoryNodePosesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
}
GetTrajectoryNodePosesResponse::GetTrajectoryNodePosesResponse(const GetTrajectoryNodePosesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_poses_(from.node_poses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
}

void GetTrajectoryNodePosesResponse::SharedCtor() {
}

GetTrajectoryNodePosesResponse::~GetTrajectoryNodePosesResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  SharedDtor();
}

void GetTrajectoryNodePosesResponse::SharedDtor() {
}

void GetTrajectoryNodePosesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTrajectoryNodePosesResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTrajectoryNodePosesResponse& GetTrajectoryNodePosesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetTrajectoryNodePosesResponse.base);
  return *internal_default_instance();
}


void GetTrajectoryNodePosesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_poses_.Clear();
  _internal_metadata_.Clear();
}

bool GetTrajectoryNodePosesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.cloud.proto.TrajectoryNodePose node_poses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_poses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  return false;
#undef DO_
}

void GetTrajectoryNodePosesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.TrajectoryNodePose node_poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_poses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->node_poses(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
}

::google::protobuf::uint8* GetTrajectoryNodePosesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.TrajectoryNodePose node_poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_poses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node_poses(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  return target;
}

size_t GetTrajectoryNodePosesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.cloud.proto.TrajectoryNodePose node_poses = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_poses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_poses(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTrajectoryNodePosesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTrajectoryNodePosesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTrajectoryNodePosesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
    MergeFrom(*source);
  }
}

void GetTrajectoryNodePosesResponse::MergeFrom(const GetTrajectoryNodePosesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_poses_.MergeFrom(from.node_poses_);
}

void GetTrajectoryNodePosesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrajectoryNodePosesResponse::CopyFrom(const GetTrajectoryNodePosesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrajectoryNodePosesResponse::IsInitialized() const {
  return true;
}

void GetTrajectoryNodePosesResponse::Swap(GetTrajectoryNodePosesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTrajectoryNodePosesResponse::InternalSwap(GetTrajectoryNodePosesResponse* other) {
  using std::swap;
  CastToBase(&node_poses_)->InternalSwap(CastToBase(&other->node_poses_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTrajectoryNodePosesResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse() {}
GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::MergeFrom(const GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::GetMetadata() const {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[30];
}
void GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void GetTrajectoryStatesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTrajectoryStatesResponse::kTrajectoriesStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTrajectoryStatesResponse::GetTrajectoryStatesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetTrajectoryStatesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetTrajectoryStatesResponse)
}
GetTrajectoryStatesResponse::GetTrajectoryStatesResponse(const GetTrajectoryStatesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectories_state_.MergeFrom(from.trajectories_state_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetTrajectoryStatesResponse)
}

void GetTrajectoryStatesResponse::SharedCtor() {
}

GetTrajectoryStatesResponse::~GetTrajectoryStatesResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  SharedDtor();
}

void GetTrajectoryStatesResponse::SharedDtor() {
}

void GetTrajectoryStatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTrajectoryStatesResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTrajectoryStatesResponse& GetTrajectoryStatesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetTrajectoryStatesResponse.base);
  return *internal_default_instance();
}


void GetTrajectoryStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectories_state_.Clear();
  _internal_metadata_.Clear();
}

bool GetTrajectoryStatesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .cartographer.cloud.proto.TrajectoryState> trajectories_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse,
              ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState > > parser(&trajectories_state_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  return false;
#undef DO_
}

void GetTrajectoryStatesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .cartographer.cloud.proto.TrajectoryState> trajectories_state = 1;
  if (!this->trajectories_state().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->trajectories_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->trajectories_state().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState >::const_iterator
          it = this->trajectories_state().begin();
          it != this->trajectories_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(trajectories_state_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::std::unique_ptr<GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState >::const_iterator
          it = this->trajectories_state().begin();
          it != this->trajectories_state().end(); ++it) {
        entry.reset(trajectories_state_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.GetTrajectoryStatesResponse)
}

::google::protobuf::uint8* GetTrajectoryStatesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .cartographer.cloud.proto.TrajectoryState> trajectories_state = 1;
  if (!this->trajectories_state().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->trajectories_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->trajectories_state().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState >::const_iterator
          it = this->trajectories_state().begin();
          it != this->trajectories_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(trajectories_state_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState >::const_iterator
          it = this->trajectories_state().begin();
          it != this->trajectories_state().end(); ++it) {
        entry.reset(trajectories_state_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  return target;
}

size_t GetTrajectoryStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .cartographer.cloud.proto.TrajectoryState> trajectories_state = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->trajectories_state_size());
  {
    ::std::unique_ptr<GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::cartographer::cloud::proto::TrajectoryState >::const_iterator
        it = this->trajectories_state().begin();
        it != this->trajectories_state().end(); ++it) {
      entry.reset(trajectories_state_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTrajectoryStatesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTrajectoryStatesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTrajectoryStatesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetTrajectoryStatesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetTrajectoryStatesResponse)
    MergeFrom(*source);
  }
}

void GetTrajectoryStatesResponse::MergeFrom(const GetTrajectoryStatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectories_state_.MergeFrom(from.trajectories_state_);
}

void GetTrajectoryStatesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrajectoryStatesResponse::CopyFrom(const GetTrajectoryStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrajectoryStatesResponse::IsInitialized() const {
  return true;
}

void GetTrajectoryStatesResponse::Swap(GetTrajectoryStatesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTrajectoryStatesResponse::InternalSwap(GetTrajectoryStatesResponse* other) {
  using std::swap;
  trajectories_state_.Swap(&other->trajectories_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTrajectoryStatesResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetLandmarkPosesResponse::InitAsDefaultInstance() {
}
void GetLandmarkPosesResponse::clear_landmark_poses() {
  landmark_poses_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLandmarkPosesResponse::kLandmarkPosesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLandmarkPosesResponse::GetLandmarkPosesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetLandmarkPosesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetLandmarkPosesResponse)
}
GetLandmarkPosesResponse::GetLandmarkPosesResponse(const GetLandmarkPosesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      landmark_poses_(from.landmark_poses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetLandmarkPosesResponse)
}

void GetLandmarkPosesResponse::SharedCtor() {
}

GetLandmarkPosesResponse::~GetLandmarkPosesResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetLandmarkPosesResponse)
  SharedDtor();
}

void GetLandmarkPosesResponse::SharedDtor() {
}

void GetLandmarkPosesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetLandmarkPosesResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLandmarkPosesResponse& GetLandmarkPosesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetLandmarkPosesResponse.base);
  return *internal_default_instance();
}


void GetLandmarkPosesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_poses_.Clear();
  _internal_metadata_.Clear();
}

bool GetLandmarkPosesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_landmark_poses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.GetLandmarkPosesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.GetLandmarkPosesResponse)
  return false;
#undef DO_
}

void GetLandmarkPosesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_poses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->landmark_poses(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.GetLandmarkPosesResponse)
}

::google::protobuf::uint8* GetLandmarkPosesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_poses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->landmark_poses(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetLandmarkPosesResponse)
  return target;
}

size_t GetLandmarkPosesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->landmark_poses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->landmark_poses(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLandmarkPosesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLandmarkPosesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLandmarkPosesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetLandmarkPosesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetLandmarkPosesResponse)
    MergeFrom(*source);
  }
}

void GetLandmarkPosesResponse::MergeFrom(const GetLandmarkPosesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_poses_.MergeFrom(from.landmark_poses_);
}

void GetLandmarkPosesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLandmarkPosesResponse::CopyFrom(const GetLandmarkPosesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLandmarkPosesResponse::IsInitialized() const {
  return true;
}

void GetLandmarkPosesResponse::Swap(GetLandmarkPosesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLandmarkPosesResponse::InternalSwap(GetLandmarkPosesResponse* other) {
  using std::swap;
  CastToBase(&landmark_poses_)->InternalSwap(CastToBase(&other->landmark_poses_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetLandmarkPosesResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetLandmarkPoseRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_SetLandmarkPoseRequest_default_instance_._instance.get_mutable()->landmark_pose_ = const_cast< ::cartographer::mapping::proto::PoseGraph_LandmarkPose*>(
      ::cartographer::mapping::proto::PoseGraph_LandmarkPose::internal_default_instance());
}
void SetLandmarkPoseRequest::clear_landmark_pose() {
  if (GetArenaNoVirtual() == NULL && landmark_pose_ != NULL) {
    delete landmark_pose_;
  }
  landmark_pose_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLandmarkPoseRequest::kLandmarkPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLandmarkPoseRequest::SetLandmarkPoseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SetLandmarkPoseRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SetLandmarkPoseRequest)
}
SetLandmarkPoseRequest::SetLandmarkPoseRequest(const SetLandmarkPoseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_landmark_pose()) {
    landmark_pose_ = new ::cartographer::mapping::proto::PoseGraph_LandmarkPose(*from.landmark_pose_);
  } else {
    landmark_pose_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SetLandmarkPoseRequest)
}

void SetLandmarkPoseRequest::SharedCtor() {
  landmark_pose_ = NULL;
}

SetLandmarkPoseRequest::~SetLandmarkPoseRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SetLandmarkPoseRequest)
  SharedDtor();
}

void SetLandmarkPoseRequest::SharedDtor() {
  if (this != internal_default_instance()) delete landmark_pose_;
}

void SetLandmarkPoseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetLandmarkPoseRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetLandmarkPoseRequest& SetLandmarkPoseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SetLandmarkPoseRequest.base);
  return *internal_default_instance();
}


void SetLandmarkPoseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && landmark_pose_ != NULL) {
    delete landmark_pose_;
  }
  landmark_pose_ = NULL;
  _internal_metadata_.Clear();
}

bool SetLandmarkPoseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landmark_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.SetLandmarkPoseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.SetLandmarkPoseRequest)
  return false;
#undef DO_
}

void SetLandmarkPoseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_pose = 1;
  if (this->has_landmark_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_landmark_pose(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.SetLandmarkPoseRequest)
}

::google::protobuf::uint8* SetLandmarkPoseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_pose = 1;
  if (this->has_landmark_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_landmark_pose(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SetLandmarkPoseRequest)
  return target;
}

size_t SetLandmarkPoseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_pose = 1;
  if (this->has_landmark_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *landmark_pose_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLandmarkPoseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLandmarkPoseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLandmarkPoseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SetLandmarkPoseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SetLandmarkPoseRequest)
    MergeFrom(*source);
  }
}

void SetLandmarkPoseRequest::MergeFrom(const SetLandmarkPoseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_landmark_pose()) {
    mutable_landmark_pose()->::cartographer::mapping::proto::PoseGraph_LandmarkPose::MergeFrom(from.landmark_pose());
  }
}

void SetLandmarkPoseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLandmarkPoseRequest::CopyFrom(const SetLandmarkPoseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLandmarkPoseRequest::IsInitialized() const {
  return true;
}

void SetLandmarkPoseRequest::Swap(SetLandmarkPoseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLandmarkPoseRequest::InternalSwap(SetLandmarkPoseRequest* other) {
  using std::swap;
  swap(landmark_pose_, other->landmark_pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetLandmarkPoseRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubmapPose::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_SubmapPose_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(
      ::cartographer::mapping::proto::SubmapId::internal_default_instance());
  ::cartographer::cloud::proto::_SubmapPose_default_instance_._instance.get_mutable()->global_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
void SubmapPose::clear_submap_id() {
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) {
    delete submap_id_;
  }
  submap_id_ = NULL;
}
void SubmapPose::clear_global_pose() {
  if (GetArenaNoVirtual() == NULL && global_pose_ != NULL) {
    delete global_pose_;
  }
  global_pose_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapPose::kSubmapIdFieldNumber;
const int SubmapPose::kSubmapVersionFieldNumber;
const int SubmapPose::kGlobalPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapPose::SubmapPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SubmapPose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SubmapPose)
}
SubmapPose::SubmapPose(const SubmapPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = NULL;
  }
  if (from.has_global_pose()) {
    global_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.global_pose_);
  } else {
    global_pose_ = NULL;
  }
  submap_version_ = from.submap_version_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SubmapPose)
}

void SubmapPose::SharedCtor() {
  ::memset(&submap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_version_) -
      reinterpret_cast<char*>(&submap_id_)) + sizeof(submap_version_));
}

SubmapPose::~SubmapPose() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SubmapPose)
  SharedDtor();
}

void SubmapPose::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
  if (this != internal_default_instance()) delete global_pose_;
}

void SubmapPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubmapPose::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmapPose& SubmapPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_SubmapPose.base);
  return *internal_default_instance();
}


void SubmapPose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SubmapPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) {
    delete submap_id_;
  }
  submap_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && global_pose_ != NULL) {
    delete global_pose_;
  }
  global_pose_ = NULL;
  submap_version_ = 0;
  _internal_metadata_.Clear();
}

bool SubmapPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.SubmapPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 submap_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d global_pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.SubmapPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.SubmapPose)
  return false;
#undef DO_
}

void SubmapPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.SubmapPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_submap_id(), output);
  }

  // int32 submap_version = 2;
  if (this->submap_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submap_version(), output);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 3;
  if (this->has_global_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_global_pose(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.SubmapPose)
}

::google::protobuf::uint8* SubmapPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SubmapPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_submap_id(), deterministic, target);
  }

  // int32 submap_version = 2;
  if (this->submap_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submap_version(), target);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 3;
  if (this->has_global_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_global_pose(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SubmapPose)
  return target;
}

size_t SubmapPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SubmapPose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submap_id_);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 3;
  if (this->has_global_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *global_pose_);
  }

  // int32 submap_version = 2;
  if (this->submap_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmapPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SubmapPose)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SubmapPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SubmapPose)
    MergeFrom(*source);
  }
}

void SubmapPose::MergeFrom(const SubmapPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SubmapPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap_id()) {
    mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from.submap_id());
  }
  if (from.has_global_pose()) {
    mutable_global_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.global_pose());
  }
  if (from.submap_version() != 0) {
    set_submap_version(from.submap_version());
  }
}

void SubmapPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SubmapPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapPose::CopyFrom(const SubmapPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SubmapPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapPose::IsInitialized() const {
  return true;
}

void SubmapPose::Swap(SubmapPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapPose::InternalSwap(SubmapPose* other) {
  using std::swap;
  swap(submap_id_, other->submap_id_);
  swap(global_pose_, other->global_pose_);
  swap(submap_version_, other->submap_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubmapPose::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetAllSubmapPosesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllSubmapPosesResponse::kSubmapPosesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllSubmapPosesResponse::GetAllSubmapPosesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetAllSubmapPosesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetAllSubmapPosesResponse)
}
GetAllSubmapPosesResponse::GetAllSubmapPosesResponse(const GetAllSubmapPosesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      submap_poses_(from.submap_poses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetAllSubmapPosesResponse)
}

void GetAllSubmapPosesResponse::SharedCtor() {
}

GetAllSubmapPosesResponse::~GetAllSubmapPosesResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  SharedDtor();
}

void GetAllSubmapPosesResponse::SharedDtor() {
}

void GetAllSubmapPosesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetAllSubmapPosesResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAllSubmapPosesResponse& GetAllSubmapPosesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetAllSubmapPosesResponse.base);
  return *internal_default_instance();
}


void GetAllSubmapPosesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  submap_poses_.Clear();
  _internal_metadata_.Clear();
}

bool GetAllSubmapPosesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.cloud.proto.SubmapPose submap_poses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_submap_poses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  return false;
#undef DO_
}

void GetAllSubmapPosesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.SubmapPose submap_poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->submap_poses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->submap_poses(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.GetAllSubmapPosesResponse)
}

::google::protobuf::uint8* GetAllSubmapPosesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.SubmapPose submap_poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->submap_poses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->submap_poses(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  return target;
}

size_t GetAllSubmapPosesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.cloud.proto.SubmapPose submap_poses = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->submap_poses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->submap_poses(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllSubmapPosesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllSubmapPosesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAllSubmapPosesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetAllSubmapPosesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetAllSubmapPosesResponse)
    MergeFrom(*source);
  }
}

void GetAllSubmapPosesResponse::MergeFrom(const GetAllSubmapPosesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  submap_poses_.MergeFrom(from.submap_poses_);
}

void GetAllSubmapPosesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllSubmapPosesResponse::CopyFrom(const GetAllSubmapPosesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllSubmapPosesResponse::IsInitialized() const {
  return true;
}

void GetAllSubmapPosesResponse::Swap(GetAllSubmapPosesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllSubmapPosesResponse::InternalSwap(GetAllSubmapPosesResponse* other) {
  using std::swap;
  CastToBase(&submap_poses_)->InternalSwap(CastToBase(&other->submap_poses_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetAllSubmapPosesResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetLocalToGlobalTransformRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLocalToGlobalTransformRequest::kTrajectoryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLocalToGlobalTransformRequest::GetLocalToGlobalTransformRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetLocalToGlobalTransformRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
}
GetLocalToGlobalTransformRequest::GetLocalToGlobalTransformRequest(const GetLocalToGlobalTransformRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
}

void GetLocalToGlobalTransformRequest::SharedCtor() {
  trajectory_id_ = 0;
}

GetLocalToGlobalTransformRequest::~GetLocalToGlobalTransformRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  SharedDtor();
}

void GetLocalToGlobalTransformRequest::SharedDtor() {
}

void GetLocalToGlobalTransformRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetLocalToGlobalTransformRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLocalToGlobalTransformRequest& GetLocalToGlobalTransformRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetLocalToGlobalTransformRequest.base);
  return *internal_default_instance();
}


void GetLocalToGlobalTransformRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool GetLocalToGlobalTransformRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  return false;
#undef DO_
}

void GetLocalToGlobalTransformRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
}

::google::protobuf::uint8* GetLocalToGlobalTransformRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  return target;
}

size_t GetLocalToGlobalTransformRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocalToGlobalTransformRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocalToGlobalTransformRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLocalToGlobalTransformRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
    MergeFrom(*source);
  }
}

void GetLocalToGlobalTransformRequest::MergeFrom(const GetLocalToGlobalTransformRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void GetLocalToGlobalTransformRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalToGlobalTransformRequest::CopyFrom(const GetLocalToGlobalTransformRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalToGlobalTransformRequest::IsInitialized() const {
  return true;
}

void GetLocalToGlobalTransformRequest::Swap(GetLocalToGlobalTransformRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLocalToGlobalTransformRequest::InternalSwap(GetLocalToGlobalTransformRequest* other) {
  using std::swap;
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetLocalToGlobalTransformRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetLocalToGlobalTransformResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_GetLocalToGlobalTransformResponse_default_instance_._instance.get_mutable()->local_to_global_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
void GetLocalToGlobalTransformResponse::clear_local_to_global() {
  if (GetArenaNoVirtual() == NULL && local_to_global_ != NULL) {
    delete local_to_global_;
  }
  local_to_global_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLocalToGlobalTransformResponse::kLocalToGlobalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLocalToGlobalTransformResponse::GetLocalToGlobalTransformResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetLocalToGlobalTransformResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
}
GetLocalToGlobalTransformResponse::GetLocalToGlobalTransformResponse(const GetLocalToGlobalTransformResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_to_global()) {
    local_to_global_ = new ::cartographer::transform::proto::Rigid3d(*from.local_to_global_);
  } else {
    local_to_global_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
}

void GetLocalToGlobalTransformResponse::SharedCtor() {
  local_to_global_ = NULL;
}

GetLocalToGlobalTransformResponse::~GetLocalToGlobalTransformResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  SharedDtor();
}

void GetLocalToGlobalTransformResponse::SharedDtor() {
  if (this != internal_default_instance()) delete local_to_global_;
}

void GetLocalToGlobalTransformResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetLocalToGlobalTransformResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLocalToGlobalTransformResponse& GetLocalToGlobalTransformResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetLocalToGlobalTransformResponse.base);
  return *internal_default_instance();
}


void GetLocalToGlobalTransformResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && local_to_global_ != NULL) {
    delete local_to_global_;
  }
  local_to_global_ = NULL;
  _internal_metadata_.Clear();
}

bool GetLocalToGlobalTransformResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d local_to_global = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_to_global()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  return false;
#undef DO_
}

void GetLocalToGlobalTransformResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_to_global = 1;
  if (this->has_local_to_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_local_to_global(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
}

::google::protobuf::uint8* GetLocalToGlobalTransformResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_to_global = 1;
  if (this->has_local_to_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_local_to_global(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  return target;
}

size_t GetLocalToGlobalTransformResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d local_to_global = 1;
  if (this->has_local_to_global()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_to_global_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocalToGlobalTransformResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocalToGlobalTransformResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLocalToGlobalTransformResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
    MergeFrom(*source);
  }
}

void GetLocalToGlobalTransformResponse::MergeFrom(const GetLocalToGlobalTransformResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_to_global()) {
    mutable_local_to_global()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_to_global());
  }
}

void GetLocalToGlobalTransformResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalToGlobalTransformResponse::CopyFrom(const GetLocalToGlobalTransformResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalToGlobalTransformResponse::IsInitialized() const {
  return true;
}

void GetLocalToGlobalTransformResponse::Swap(GetLocalToGlobalTransformResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLocalToGlobalTransformResponse::InternalSwap(GetLocalToGlobalTransformResponse* other) {
  using std::swap;
  swap(local_to_global_, other->local_to_global_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetLocalToGlobalTransformResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetConstraintsResponse::InitAsDefaultInstance() {
}
void GetConstraintsResponse::clear_constraints() {
  constraints_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetConstraintsResponse::kConstraintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetConstraintsResponse::GetConstraintsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetConstraintsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetConstraintsResponse)
}
GetConstraintsResponse::GetConstraintsResponse(const GetConstraintsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      constraints_(from.constraints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetConstraintsResponse)
}

void GetConstraintsResponse::SharedCtor() {
}

GetConstraintsResponse::~GetConstraintsResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetConstraintsResponse)
  SharedDtor();
}

void GetConstraintsResponse::SharedDtor() {
}

void GetConstraintsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetConstraintsResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetConstraintsResponse& GetConstraintsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_GetConstraintsResponse.base);
  return *internal_default_instance();
}


void GetConstraintsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetConstraintsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraints_.Clear();
  _internal_metadata_.Clear();
}

bool GetConstraintsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.GetConstraintsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_constraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.GetConstraintsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.GetConstraintsResponse)
  return false;
#undef DO_
}

void GetConstraintsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.GetConstraintsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constraints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->constraints(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.GetConstraintsResponse)
}

::google::protobuf::uint8* GetConstraintsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetConstraintsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constraints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->constraints(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetConstraintsResponse)
  return target;
}

size_t GetConstraintsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetConstraintsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraints = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->constraints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->constraints(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConstraintsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetConstraintsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConstraintsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetConstraintsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetConstraintsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetConstraintsResponse)
    MergeFrom(*source);
  }
}

void GetConstraintsResponse::MergeFrom(const GetConstraintsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetConstraintsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraints_.MergeFrom(from.constraints_);
}

void GetConstraintsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetConstraintsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConstraintsResponse::CopyFrom(const GetConstraintsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetConstraintsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConstraintsResponse::IsInitialized() const {
  return true;
}

void GetConstraintsResponse::Swap(GetConstraintsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetConstraintsResponse::InternalSwap(GetConstraintsResponse* other) {
  using std::swap;
  CastToBase(&constraints_)->InternalSwap(CastToBase(&other->constraints_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetConstraintsResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteStateResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_WriteStateResponse_default_instance_.header_ = const_cast< ::cartographer::mapping::proto::SerializationHeader*>(
      ::cartographer::mapping::proto::SerializationHeader::internal_default_instance());
  ::cartographer::cloud::proto::_WriteStateResponse_default_instance_.serialized_data_ = const_cast< ::cartographer::mapping::proto::SerializedData*>(
      ::cartographer::mapping::proto::SerializedData::internal_default_instance());
}
void WriteStateResponse::set_allocated_header(::cartographer::mapping::proto::SerializationHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_state_chunk();
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
    state_chunk_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.WriteStateResponse.header)
}
void WriteStateResponse::clear_header() {
  if (has_header()) {
    delete state_chunk_.header_;
    clear_has_state_chunk();
  }
}
void WriteStateResponse::set_allocated_serialized_data(::cartographer::mapping::proto::SerializedData* serialized_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_state_chunk();
  if (serialized_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serialized_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serialized_data, submessage_arena);
    }
    set_has_serialized_data();
    state_chunk_.serialized_data_ = serialized_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.WriteStateResponse.serialized_data)
}
void WriteStateResponse::clear_serialized_data() {
  if (has_serialized_data()) {
    delete state_chunk_.serialized_data_;
    clear_has_state_chunk();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteStateResponse::kHeaderFieldNumber;
const int WriteStateResponse::kSerializedDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteStateResponse::WriteStateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_WriteStateResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.WriteStateResponse)
}
WriteStateResponse::WriteStateResponse(const WriteStateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_state_chunk();
  switch (from.state_chunk_case()) {
    case kHeader: {
      mutable_header()->::cartographer::mapping::proto::SerializationHeader::MergeFrom(from.header());
      break;
    }
    case kSerializedData: {
      mutable_serialized_data()->::cartographer::mapping::proto::SerializedData::MergeFrom(from.serialized_data());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.WriteStateResponse)
}

void WriteStateResponse::SharedCtor() {
  clear_has_state_chunk();
}

WriteStateResponse::~WriteStateResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.WriteStateResponse)
  SharedDtor();
}

void WriteStateResponse::SharedDtor() {
  if (has_state_chunk()) {
    clear_state_chunk();
  }
}

void WriteStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteStateResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteStateResponse& WriteStateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_WriteStateResponse.base);
  return *internal_default_instance();
}


void WriteStateResponse::clear_state_chunk() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.cloud.proto.WriteStateResponse)
  switch (state_chunk_case()) {
    case kHeader: {
      delete state_chunk_.header_;
      break;
    }
    case kSerializedData: {
      delete state_chunk_.serialized_data_;
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_CHUNK_NOT_SET;
}


void WriteStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.WriteStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_state_chunk();
  _internal_metadata_.Clear();
}

bool WriteStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.WriteStateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SerializationHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.SerializedData serialized_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serialized_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.WriteStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.WriteStateResponse)
  return false;
#undef DO_
}

void WriteStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.WriteStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SerializationHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .cartographer.mapping.proto.SerializedData serialized_data = 2;
  if (has_serialized_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_serialized_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.WriteStateResponse)
}

::google::protobuf::uint8* WriteStateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.WriteStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SerializationHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .cartographer.mapping.proto.SerializedData serialized_data = 2;
  if (has_serialized_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_serialized_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.WriteStateResponse)
  return target;
}

size_t WriteStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.WriteStateResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (state_chunk_case()) {
    // .cartographer.mapping.proto.SerializationHeader header = 1;
    case kHeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_chunk_.header_);
      break;
    }
    // .cartographer.mapping.proto.SerializedData serialized_data = 2;
    case kSerializedData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_chunk_.serialized_data_);
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.WriteStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteStateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteStateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.WriteStateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.WriteStateResponse)
    MergeFrom(*source);
  }
}

void WriteStateResponse::MergeFrom(const WriteStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.WriteStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.state_chunk_case()) {
    case kHeader: {
      mutable_header()->::cartographer::mapping::proto::SerializationHeader::MergeFrom(from.header());
      break;
    }
    case kSerializedData: {
      mutable_serialized_data()->::cartographer::mapping::proto::SerializedData::MergeFrom(from.serialized_data());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
}

void WriteStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.WriteStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteStateResponse::CopyFrom(const WriteStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.WriteStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteStateResponse::IsInitialized() const {
  return true;
}

void WriteStateResponse::Swap(WriteStateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteStateResponse::InternalSwap(WriteStateResponse* other) {
  using std::swap;
  swap(state_chunk_, other->state_chunk_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteStateResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteStateToFileRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteStateToFileRequest::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteStateToFileRequest::WriteStateToFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_WriteStateToFileRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.WriteStateToFileRequest)
}
WriteStateToFileRequest::WriteStateToFileRequest(const WriteStateToFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.WriteStateToFileRequest)
}

void WriteStateToFileRequest::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WriteStateToFileRequest::~WriteStateToFileRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.WriteStateToFileRequest)
  SharedDtor();
}

void WriteStateToFileRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteStateToFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteStateToFileRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteStateToFileRequest& WriteStateToFileRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_WriteStateToFileRequest.base);
  return *internal_default_instance();
}


void WriteStateToFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.WriteStateToFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool WriteStateToFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.WriteStateToFileRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.WriteStateToFileRequest.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.WriteStateToFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.WriteStateToFileRequest)
  return false;
#undef DO_
}

void WriteStateToFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.WriteStateToFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.WriteStateToFileRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.WriteStateToFileRequest)
}

::google::protobuf::uint8* WriteStateToFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.WriteStateToFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.WriteStateToFileRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.WriteStateToFileRequest)
  return target;
}

size_t WriteStateToFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.WriteStateToFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteStateToFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.WriteStateToFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteStateToFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteStateToFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.WriteStateToFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.WriteStateToFileRequest)
    MergeFrom(*source);
  }
}

void WriteStateToFileRequest::MergeFrom(const WriteStateToFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.WriteStateToFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void WriteStateToFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.WriteStateToFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteStateToFileRequest::CopyFrom(const WriteStateToFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.WriteStateToFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteStateToFileRequest::IsInitialized() const {
  return true;
}

void WriteStateToFileRequest::Swap(WriteStateToFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteStateToFileRequest::InternalSwap(WriteStateToFileRequest* other) {
  using std::swap;
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteStateToFileRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteStateToFileResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteStateToFileResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteStateToFileResponse::WriteStateToFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_WriteStateToFileResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.WriteStateToFileResponse)
}
WriteStateToFileResponse::WriteStateToFileResponse(const WriteStateToFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.WriteStateToFileResponse)
}

void WriteStateToFileResponse::SharedCtor() {
  success_ = false;
}

WriteStateToFileResponse::~WriteStateToFileResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.WriteStateToFileResponse)
  SharedDtor();
}

void WriteStateToFileResponse::SharedDtor() {
}

void WriteStateToFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteStateToFileResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteStateToFileResponse& WriteStateToFileResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_WriteStateToFileResponse.base);
  return *internal_default_instance();
}


void WriteStateToFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.WriteStateToFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

bool WriteStateToFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.WriteStateToFileResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.WriteStateToFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.WriteStateToFileResponse)
  return false;
#undef DO_
}

void WriteStateToFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.WriteStateToFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.WriteStateToFileResponse)
}

::google::protobuf::uint8* WriteStateToFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.WriteStateToFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.WriteStateToFileResponse)
  return target;
}

size_t WriteStateToFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.WriteStateToFileResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteStateToFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.WriteStateToFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteStateToFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteStateToFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.WriteStateToFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.WriteStateToFileResponse)
    MergeFrom(*source);
  }
}

void WriteStateToFileResponse::MergeFrom(const WriteStateToFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.WriteStateToFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void WriteStateToFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.WriteStateToFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteStateToFileResponse::CopyFrom(const WriteStateToFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.WriteStateToFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteStateToFileResponse::IsInitialized() const {
  return true;
}

void WriteStateToFileResponse::Swap(WriteStateToFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteStateToFileResponse::InternalSwap(WriteStateToFileResponse* other) {
  using std::swap;
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteStateToFileResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IsTrajectoryFinishedRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsTrajectoryFinishedRequest::kTrajectoryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsTrajectoryFinishedRequest::IsTrajectoryFinishedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_IsTrajectoryFinishedRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
}
IsTrajectoryFinishedRequest::IsTrajectoryFinishedRequest(const IsTrajectoryFinishedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
}

void IsTrajectoryFinishedRequest::SharedCtor() {
  trajectory_id_ = 0;
}

IsTrajectoryFinishedRequest::~IsTrajectoryFinishedRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  SharedDtor();
}

void IsTrajectoryFinishedRequest::SharedDtor() {
}

void IsTrajectoryFinishedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IsTrajectoryFinishedRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IsTrajectoryFinishedRequest& IsTrajectoryFinishedRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_IsTrajectoryFinishedRequest.base);
  return *internal_default_instance();
}


void IsTrajectoryFinishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool IsTrajectoryFinishedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  return false;
#undef DO_
}

void IsTrajectoryFinishedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
}

::google::protobuf::uint8* IsTrajectoryFinishedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  return target;
}

size_t IsTrajectoryFinishedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsTrajectoryFinishedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsTrajectoryFinishedRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsTrajectoryFinishedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
    MergeFrom(*source);
  }
}

void IsTrajectoryFinishedRequest::MergeFrom(const IsTrajectoryFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void IsTrajectoryFinishedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsTrajectoryFinishedRequest::CopyFrom(const IsTrajectoryFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsTrajectoryFinishedRequest::IsInitialized() const {
  return true;
}

void IsTrajectoryFinishedRequest::Swap(IsTrajectoryFinishedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsTrajectoryFinishedRequest::InternalSwap(IsTrajectoryFinishedRequest* other) {
  using std::swap;
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IsTrajectoryFinishedRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IsTrajectoryFinishedResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsTrajectoryFinishedResponse::kIsFinishedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsTrajectoryFinishedResponse::IsTrajectoryFinishedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_IsTrajectoryFinishedResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
}
IsTrajectoryFinishedResponse::IsTrajectoryFinishedResponse(const IsTrajectoryFinishedResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_finished_ = from.is_finished_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
}

void IsTrajectoryFinishedResponse::SharedCtor() {
  is_finished_ = false;
}

IsTrajectoryFinishedResponse::~IsTrajectoryFinishedResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  SharedDtor();
}

void IsTrajectoryFinishedResponse::SharedDtor() {
}

void IsTrajectoryFinishedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IsTrajectoryFinishedResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IsTrajectoryFinishedResponse& IsTrajectoryFinishedResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_IsTrajectoryFinishedResponse.base);
  return *internal_default_instance();
}


void IsTrajectoryFinishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_finished_ = false;
  _internal_metadata_.Clear();
}

bool IsTrajectoryFinishedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_finished = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  return false;
#undef DO_
}

void IsTrajectoryFinishedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_finished = 1;
  if (this->is_finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_finished(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
}

::google::protobuf::uint8* IsTrajectoryFinishedResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_finished = 1;
  if (this->is_finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_finished(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  return target;
}

size_t IsTrajectoryFinishedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_finished = 1;
  if (this->is_finished() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsTrajectoryFinishedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsTrajectoryFinishedResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsTrajectoryFinishedResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
    MergeFrom(*source);
  }
}

void IsTrajectoryFinishedResponse::MergeFrom(const IsTrajectoryFinishedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_finished() != 0) {
    set_is_finished(from.is_finished());
  }
}

void IsTrajectoryFinishedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsTrajectoryFinishedResponse::CopyFrom(const IsTrajectoryFinishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsTrajectoryFinishedResponse::IsInitialized() const {
  return true;
}

void IsTrajectoryFinishedResponse::Swap(IsTrajectoryFinishedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsTrajectoryFinishedResponse::InternalSwap(IsTrajectoryFinishedResponse* other) {
  using std::swap;
  swap(is_finished_, other->is_finished_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IsTrajectoryFinishedResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IsTrajectoryFrozenRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsTrajectoryFrozenRequest::kTrajectoryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsTrajectoryFrozenRequest::IsTrajectoryFrozenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_IsTrajectoryFrozenRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
}
IsTrajectoryFrozenRequest::IsTrajectoryFrozenRequest(const IsTrajectoryFrozenRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
}

void IsTrajectoryFrozenRequest::SharedCtor() {
  trajectory_id_ = 0;
}

IsTrajectoryFrozenRequest::~IsTrajectoryFrozenRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  SharedDtor();
}

void IsTrajectoryFrozenRequest::SharedDtor() {
}

void IsTrajectoryFrozenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IsTrajectoryFrozenRequest::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IsTrajectoryFrozenRequest& IsTrajectoryFrozenRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_IsTrajectoryFrozenRequest.base);
  return *internal_default_instance();
}


void IsTrajectoryFrozenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool IsTrajectoryFrozenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  return false;
#undef DO_
}

void IsTrajectoryFrozenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
}

::google::protobuf::uint8* IsTrajectoryFrozenRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  return target;
}

size_t IsTrajectoryFrozenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsTrajectoryFrozenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsTrajectoryFrozenRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsTrajectoryFrozenRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
    MergeFrom(*source);
  }
}

void IsTrajectoryFrozenRequest::MergeFrom(const IsTrajectoryFrozenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void IsTrajectoryFrozenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsTrajectoryFrozenRequest::CopyFrom(const IsTrajectoryFrozenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsTrajectoryFrozenRequest::IsInitialized() const {
  return true;
}

void IsTrajectoryFrozenRequest::Swap(IsTrajectoryFrozenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsTrajectoryFrozenRequest::InternalSwap(IsTrajectoryFrozenRequest* other) {
  using std::swap;
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IsTrajectoryFrozenRequest::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IsTrajectoryFrozenResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsTrajectoryFrozenResponse::kIsFrozenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsTrajectoryFrozenResponse::IsTrajectoryFrozenResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_IsTrajectoryFrozenResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
}
IsTrajectoryFrozenResponse::IsTrajectoryFrozenResponse(const IsTrajectoryFrozenResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_frozen_ = from.is_frozen_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
}

void IsTrajectoryFrozenResponse::SharedCtor() {
  is_frozen_ = false;
}

IsTrajectoryFrozenResponse::~IsTrajectoryFrozenResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  SharedDtor();
}

void IsTrajectoryFrozenResponse::SharedDtor() {
}

void IsTrajectoryFrozenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IsTrajectoryFrozenResponse::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IsTrajectoryFrozenResponse& IsTrajectoryFrozenResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::scc_info_IsTrajectoryFrozenResponse.base);
  return *internal_default_instance();
}


void IsTrajectoryFrozenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_frozen_ = false;
  _internal_metadata_.Clear();
}

bool IsTrajectoryFrozenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_frozen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_frozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  return false;
#undef DO_
}

void IsTrajectoryFrozenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_frozen = 1;
  if (this->is_frozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_frozen(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
}

::google::protobuf::uint8* IsTrajectoryFrozenResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_frozen = 1;
  if (this->is_frozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_frozen(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  return target;
}

size_t IsTrajectoryFrozenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_frozen = 1;
  if (this->is_frozen() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsTrajectoryFrozenResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsTrajectoryFrozenResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsTrajectoryFrozenResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
    MergeFrom(*source);
  }
}

void IsTrajectoryFrozenResponse::MergeFrom(const IsTrajectoryFrozenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_frozen() != 0) {
    set_is_frozen(from.is_frozen());
  }
}

void IsTrajectoryFrozenResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsTrajectoryFrozenResponse::CopyFrom(const IsTrajectoryFrozenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsTrajectoryFrozenResponse::IsInitialized() const {
  return true;
}

void IsTrajectoryFrozenResponse::Swap(IsTrajectoryFrozenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsTrajectoryFrozenResponse::InternalSwap(IsTrajectoryFrozenResponse* other) {
  using std::swap;
  swap(is_frozen_, other->is_frozen_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IsTrajectoryFrozenResponse::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::SensorId* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SensorId >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SensorId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::AddTrajectoryRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddTrajectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddTrajectoryRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::SensorMetadata* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SensorMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SensorMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::SensorData* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SensorData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SensorData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::AddTrajectoryResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddTrajectoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddTrajectoryResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::AddSensorDataBatchRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddSensorDataBatchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddSensorDataBatchRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::AddOdometryDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddOdometryDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddOdometryDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::AddImuDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddImuDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddImuDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::AddRangefinderDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddRangefinderDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddRangefinderDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::AddFixedFramePoseDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddFixedFramePoseDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddFixedFramePoseDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::AddLandmarkDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddLandmarkDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddLandmarkDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::FinishTrajectoryRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::FinishTrajectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::FinishTrajectoryRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::DeleteTrajectoryRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::DeleteTrajectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::DeleteTrajectoryRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::LocalSlamInsertionResult* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::LocalSlamInsertionResult >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::LocalSlamInsertionResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::GetSubmapRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetSubmapRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetSubmapRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::LoadStateRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::LoadStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::LoadStateRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::TrajectoryRemapping* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::TrajectoryRemapping >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::TrajectoryRemapping >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::LoadStateResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::LoadStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::LoadStateResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::LoadStateFromFileRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::LoadStateFromFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::LoadStateFromFileRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::LoadStateFromFileResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::LoadStateFromFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::LoadStateFromFileResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::GetSubmapResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetSubmapResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetSubmapResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::TrajectoryNodePose* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::TrajectoryNodePose >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::TrajectoryNodePose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::GetTrajectoryNodePosesResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetTrajectoryNodePosesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetTrajectoryNodePosesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::GetTrajectoryStatesResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetTrajectoryStatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetTrajectoryStatesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::GetLandmarkPosesResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetLandmarkPosesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetLandmarkPosesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::SetLandmarkPoseRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SetLandmarkPoseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SetLandmarkPoseRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::SubmapPose* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SubmapPose >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SubmapPose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::GetAllSubmapPosesResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetAllSubmapPosesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetAllSubmapPosesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::GetLocalToGlobalTransformRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetLocalToGlobalTransformRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetLocalToGlobalTransformRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::GetLocalToGlobalTransformResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetLocalToGlobalTransformResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetLocalToGlobalTransformResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::GetConstraintsResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetConstraintsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetConstraintsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::WriteStateResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::WriteStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::WriteStateResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::WriteStateToFileRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::WriteStateToFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::WriteStateToFileRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::WriteStateToFileResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::WriteStateToFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::WriteStateToFileResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::IsTrajectoryFinishedRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::IsTrajectoryFinishedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::IsTrajectoryFinishedRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::IsTrajectoryFinishedResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::IsTrajectoryFinishedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::IsTrajectoryFinishedResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::IsTrajectoryFrozenRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::IsTrajectoryFrozenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::IsTrajectoryFrozenRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::IsTrajectoryFrozenResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::IsTrajectoryFrozenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::IsTrajectoryFrozenResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
