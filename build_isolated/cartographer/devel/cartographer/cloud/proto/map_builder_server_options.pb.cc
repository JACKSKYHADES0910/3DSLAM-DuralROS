// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/cloud/proto/map_builder_server_options.proto

#include "cartographer/cloud/proto/map_builder_server_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapBuilderOptions;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto
namespace cartographer {
namespace cloud {
namespace proto {
class MapBuilderServerOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapBuilderServerOptions>
      _instance;
} _MapBuilderServerOptions_default_instance_;
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
namespace protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto {
static void InitDefaultsMapBuilderServerOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_MapBuilderServerOptions_default_instance_;
    new (ptr) ::cartographer::cloud::proto::MapBuilderServerOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::MapBuilderServerOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapBuilderServerOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapBuilderServerOptions}, {
      &protobuf_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto::scc_info_MapBuilderOptions.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MapBuilderServerOptions.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, server_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, num_grpc_threads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, num_event_threads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, map_builder_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, uplink_server_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, upload_batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, enable_ssl_encryption_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, enable_google_auth_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::cloud::proto::MapBuilderServerOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_MapBuilderServerOptions_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cartographer/cloud/proto/map_builder_server_options.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n9cartographer/cloud/proto/map_builder_s"
      "erver_options.proto\022\030cartographer.cloud."
      "proto\0324cartographer/mapping/proto/map_bu"
      "ilder_options.proto\"\247\002\n\027MapBuilderServer"
      "Options\022\026\n\016server_address\030\001 \001(\t\022\030\n\020num_g"
      "rpc_threads\030\002 \001(\005\022\031\n\021num_event_threads\030\003"
      " \001(\005\022J\n\023map_builder_options\030\004 \001(\0132-.cart"
      "ographer.mapping.proto.MapBuilderOptions"
      "\022\035\n\025uplink_server_address\030\005 \001(\t\022\031\n\021uploa"
      "d_batch_size\030\006 \001(\005\022\035\n\025enable_ssl_encrypt"
      "ion\030\007 \001(\010\022\032\n\022enable_google_auth\030\t \001(\010b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 445);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/cloud/proto/map_builder_server_options.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto
namespace cartographer {
namespace cloud {
namespace proto {

// ===================================================================

void MapBuilderServerOptions::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_MapBuilderServerOptions_default_instance_._instance.get_mutable()->map_builder_options_ = const_cast< ::cartographer::mapping::proto::MapBuilderOptions*>(
      ::cartographer::mapping::proto::MapBuilderOptions::internal_default_instance());
}
void MapBuilderServerOptions::clear_map_builder_options() {
  if (GetArenaNoVirtual() == NULL && map_builder_options_ != NULL) {
    delete map_builder_options_;
  }
  map_builder_options_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapBuilderServerOptions::kServerAddressFieldNumber;
const int MapBuilderServerOptions::kNumGrpcThreadsFieldNumber;
const int MapBuilderServerOptions::kNumEventThreadsFieldNumber;
const int MapBuilderServerOptions::kMapBuilderOptionsFieldNumber;
const int MapBuilderServerOptions::kUplinkServerAddressFieldNumber;
const int MapBuilderServerOptions::kUploadBatchSizeFieldNumber;
const int MapBuilderServerOptions::kEnableSslEncryptionFieldNumber;
const int MapBuilderServerOptions::kEnableGoogleAuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapBuilderServerOptions::MapBuilderServerOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto::scc_info_MapBuilderServerOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.MapBuilderServerOptions)
}
MapBuilderServerOptions::MapBuilderServerOptions(const MapBuilderServerOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_address().size() > 0) {
    server_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_address_);
  }
  uplink_server_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uplink_server_address().size() > 0) {
    uplink_server_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uplink_server_address_);
  }
  if (from.has_map_builder_options()) {
    map_builder_options_ = new ::cartographer::mapping::proto::MapBuilderOptions(*from.map_builder_options_);
  } else {
    map_builder_options_ = NULL;
  }
  ::memcpy(&num_grpc_threads_, &from.num_grpc_threads_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_google_auth_) -
    reinterpret_cast<char*>(&num_grpc_threads_)) + sizeof(enable_google_auth_));
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.MapBuilderServerOptions)
}

void MapBuilderServerOptions::SharedCtor() {
  server_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uplink_server_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&map_builder_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_google_auth_) -
      reinterpret_cast<char*>(&map_builder_options_)) + sizeof(enable_google_auth_));
}

MapBuilderServerOptions::~MapBuilderServerOptions() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.MapBuilderServerOptions)
  SharedDtor();
}

void MapBuilderServerOptions::SharedDtor() {
  server_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uplink_server_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_builder_options_;
}

void MapBuilderServerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapBuilderServerOptions::descriptor() {
  ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapBuilderServerOptions& MapBuilderServerOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto::scc_info_MapBuilderServerOptions.base);
  return *internal_default_instance();
}


void MapBuilderServerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.MapBuilderServerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uplink_server_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && map_builder_options_ != NULL) {
    delete map_builder_options_;
  }
  map_builder_options_ = NULL;
  ::memset(&num_grpc_threads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_google_auth_) -
      reinterpret_cast<char*>(&num_grpc_threads_)) + sizeof(enable_google_auth_));
  _internal_metadata_.Clear();
}

bool MapBuilderServerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.MapBuilderServerOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string server_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_address().data(), static_cast<int>(this->server_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.MapBuilderServerOptions.server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_grpc_threads = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_grpc_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_event_threads = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_event_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_builder_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uplink_server_address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uplink_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uplink_server_address().data(), static_cast<int>(this->uplink_server_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 upload_batch_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_ssl_encryption = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ssl_encryption_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_google_auth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_google_auth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.MapBuilderServerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.MapBuilderServerOptions)
  return false;
#undef DO_
}

void MapBuilderServerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.MapBuilderServerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_address = 1;
  if (this->server_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_address().data(), static_cast<int>(this->server_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.server_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_address(), output);
  }

  // int32 num_grpc_threads = 2;
  if (this->num_grpc_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_grpc_threads(), output);
  }

  // int32 num_event_threads = 3;
  if (this->num_event_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_event_threads(), output);
  }

  // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
  if (this->has_map_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_map_builder_options(), output);
  }

  // string uplink_server_address = 5;
  if (this->uplink_server_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uplink_server_address().data(), static_cast<int>(this->uplink_server_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uplink_server_address(), output);
  }

  // int32 upload_batch_size = 6;
  if (this->upload_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->upload_batch_size(), output);
  }

  // bool enable_ssl_encryption = 7;
  if (this->enable_ssl_encryption() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_ssl_encryption(), output);
  }

  // bool enable_google_auth = 9;
  if (this->enable_google_auth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_google_auth(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.MapBuilderServerOptions)
}

::google::protobuf::uint8* MapBuilderServerOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.MapBuilderServerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_address = 1;
  if (this->server_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_address().data(), static_cast<int>(this->server_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.server_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_address(), target);
  }

  // int32 num_grpc_threads = 2;
  if (this->num_grpc_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_grpc_threads(), target);
  }

  // int32 num_event_threads = 3;
  if (this->num_event_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_event_threads(), target);
  }

  // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
  if (this->has_map_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_map_builder_options(), deterministic, target);
  }

  // string uplink_server_address = 5;
  if (this->uplink_server_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uplink_server_address().data(), static_cast<int>(this->uplink_server_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uplink_server_address(), target);
  }

  // int32 upload_batch_size = 6;
  if (this->upload_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->upload_batch_size(), target);
  }

  // bool enable_ssl_encryption = 7;
  if (this->enable_ssl_encryption() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable_ssl_encryption(), target);
  }

  // bool enable_google_auth = 9;
  if (this->enable_google_auth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_google_auth(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.MapBuilderServerOptions)
  return target;
}

size_t MapBuilderServerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.MapBuilderServerOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string server_address = 1;
  if (this->server_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_address());
  }

  // string uplink_server_address = 5;
  if (this->uplink_server_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uplink_server_address());
  }

  // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
  if (this->has_map_builder_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_builder_options_);
  }

  // int32 num_grpc_threads = 2;
  if (this->num_grpc_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_grpc_threads());
  }

  // int32 num_event_threads = 3;
  if (this->num_event_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_event_threads());
  }

  // int32 upload_batch_size = 6;
  if (this->upload_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->upload_batch_size());
  }

  // bool enable_ssl_encryption = 7;
  if (this->enable_ssl_encryption() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_google_auth = 9;
  if (this->enable_google_auth() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapBuilderServerOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MapBuilderServerOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapBuilderServerOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.MapBuilderServerOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.MapBuilderServerOptions)
    MergeFrom(*source);
  }
}

void MapBuilderServerOptions::MergeFrom(const MapBuilderServerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_address().size() > 0) {

    server_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_address_);
  }
  if (from.uplink_server_address().size() > 0) {

    uplink_server_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uplink_server_address_);
  }
  if (from.has_map_builder_options()) {
    mutable_map_builder_options()->::cartographer::mapping::proto::MapBuilderOptions::MergeFrom(from.map_builder_options());
  }
  if (from.num_grpc_threads() != 0) {
    set_num_grpc_threads(from.num_grpc_threads());
  }
  if (from.num_event_threads() != 0) {
    set_num_event_threads(from.num_event_threads());
  }
  if (from.upload_batch_size() != 0) {
    set_upload_batch_size(from.upload_batch_size());
  }
  if (from.enable_ssl_encryption() != 0) {
    set_enable_ssl_encryption(from.enable_ssl_encryption());
  }
  if (from.enable_google_auth() != 0) {
    set_enable_google_auth(from.enable_google_auth());
  }
}

void MapBuilderServerOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBuilderServerOptions::CopyFrom(const MapBuilderServerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBuilderServerOptions::IsInitialized() const {
  return true;
}

void MapBuilderServerOptions::Swap(MapBuilderServerOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapBuilderServerOptions::InternalSwap(MapBuilderServerOptions* other) {
  using std::swap;
  server_address_.Swap(&other->server_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uplink_server_address_.Swap(&other->uplink_server_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(map_builder_options_, other->map_builder_options_);
  swap(num_grpc_threads_, other->num_grpc_threads_);
  swap(num_event_threads_, other->num_event_threads_);
  swap(upload_batch_size_, other->upload_batch_size_);
  swap(enable_ssl_encryption_, other->enable_ssl_encryption_);
  swap(enable_google_auth_, other->enable_google_auth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapBuilderServerOptions::GetMetadata() const {
  protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::cloud::proto::MapBuilderServerOptions* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::MapBuilderServerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::MapBuilderServerOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
