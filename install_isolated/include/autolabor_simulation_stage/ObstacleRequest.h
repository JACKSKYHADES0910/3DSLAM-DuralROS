// Generated by gencpp from file autolabor_simulation_stage/ObstacleRequest.msg
// DO NOT EDIT!


#ifndef AUTOLABOR_SIMULATION_STAGE_MESSAGE_OBSTACLEREQUEST_H
#define AUTOLABOR_SIMULATION_STAGE_MESSAGE_OBSTACLEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>

namespace autolabor_simulation_stage
{
template <class ContainerAllocator>
struct ObstacleRequest_
{
  typedef ObstacleRequest_<ContainerAllocator> Type;

  ObstacleRequest_()
    : obstacle_id()
    , type(0)
    , transform()
    , vertex()  {
      transform.assign(0.0);
  }
  ObstacleRequest_(const ContainerAllocator& _alloc)
    : obstacle_id(_alloc)
    , type(0)
    , transform()
    , vertex(_alloc)  {
  (void)_alloc;
      transform.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _obstacle_id_type;
  _obstacle_id_type obstacle_id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef boost::array<float, 3>  _transform_type;
  _transform_type transform;

   typedef std::vector< ::geometry_msgs::Polygon_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Polygon_<ContainerAllocator> >> _vertex_type;
  _vertex_type vertex;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NEW)
  #undef NEW
#endif
#if defined(_WIN32) && defined(TRANSFORM)
  #undef TRANSFORM
#endif
#if defined(_WIN32) && defined(DELETE)
  #undef DELETE
#endif

  enum {
    NEW = 0u,
    TRANSFORM = 1u,
    DELETE = 2u,
  };


  typedef boost::shared_ptr< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleRequest_

typedef ::autolabor_simulation_stage::ObstacleRequest_<std::allocator<void> > ObstacleRequest;

typedef boost::shared_ptr< ::autolabor_simulation_stage::ObstacleRequest > ObstacleRequestPtr;
typedef boost::shared_ptr< ::autolabor_simulation_stage::ObstacleRequest const> ObstacleRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator1> & lhs, const ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.obstacle_id == rhs.obstacle_id &&
    lhs.type == rhs.type &&
    lhs.transform == rhs.transform &&
    lhs.vertex == rhs.vertex;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator1> & lhs, const ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autolabor_simulation_stage

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16784fb8acead2e3b4470fa59f07d999";
  }

  static const char* value(const ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16784fb8acead2e3ULL;
  static const uint64_t static_value2 = 0xb4470fa59f07d999ULL;
};

template<class ContainerAllocator>
struct DataType< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autolabor_simulation_stage/ObstacleRequest";
  }

  static const char* value(const ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 NEW=0\n"
"uint8 TRANSFORM=1\n"
"uint8 DELETE=2\n"
"\n"
"string obstacle_id\n"
"uint8 type\n"
"float32[3] transform\n"
"geometry_msgs/Polygon[] vertex\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacle_id);
      stream.next(m.type);
      stream.next(m.transform);
      stream.next(m.vertex);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autolabor_simulation_stage::ObstacleRequest_<ContainerAllocator>& v)
  {
    s << indent << "obstacle_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.obstacle_id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "transform[]" << std::endl;
    for (size_t i = 0; i < v.transform.size(); ++i)
    {
      s << indent << "  transform[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.transform[i]);
    }
    s << indent << "vertex[]" << std::endl;
    for (size_t i = 0; i < v.vertex.size(); ++i)
    {
      s << indent << "  vertex[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "    ", v.vertex[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOLABOR_SIMULATION_STAGE_MESSAGE_OBSTACLEREQUEST_H
