// Generated by gencpp from file autolabor_canbus_driver/CanBusMessage.msg
// DO NOT EDIT!


#ifndef AUTOLABOR_CANBUS_DRIVER_MESSAGE_CANBUSMESSAGE_H
#define AUTOLABOR_CANBUS_DRIVER_MESSAGE_CANBUSMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autolabor_canbus_driver
{
template <class ContainerAllocator>
struct CanBusMessage_
{
  typedef CanBusMessage_<ContainerAllocator> Type;

  CanBusMessage_()
    : node_type(0)
    , node_seq(0)
    , msg_type(0)
    , payload()  {
    }
  CanBusMessage_(const ContainerAllocator& _alloc)
    : node_type(0)
    , node_seq(0)
    , msg_type(0)
    , payload(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _node_type_type;
  _node_type_type node_type;

   typedef uint8_t _node_seq_type;
  _node_seq_type node_seq;

   typedef uint8_t _msg_type_type;
  _msg_type_type msg_type;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _payload_type;
  _payload_type payload;





  typedef boost::shared_ptr< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> const> ConstPtr;

}; // struct CanBusMessage_

typedef ::autolabor_canbus_driver::CanBusMessage_<std::allocator<void> > CanBusMessage;

typedef boost::shared_ptr< ::autolabor_canbus_driver::CanBusMessage > CanBusMessagePtr;
typedef boost::shared_ptr< ::autolabor_canbus_driver::CanBusMessage const> CanBusMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator1> & lhs, const ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator2> & rhs)
{
  return lhs.node_type == rhs.node_type &&
    lhs.node_seq == rhs.node_seq &&
    lhs.msg_type == rhs.msg_type &&
    lhs.payload == rhs.payload;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator1> & lhs, const ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autolabor_canbus_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fc00d85252b3621e3f37dfe24254deb";
  }

  static const char* value(const ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fc00d85252b3621ULL;
  static const uint64_t static_value2 = 0xe3f37dfe24254debULL;
};

template<class ContainerAllocator>
struct DataType< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autolabor_canbus_driver/CanBusMessage";
  }

  static const char* value(const ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 node_type\n"
"uint8 node_seq\n"
"uint8 msg_type\n"
"uint8[] payload\n"
;
  }

  static const char* value(const ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_type);
      stream.next(m.node_seq);
      stream.next(m.msg_type);
      stream.next(m.payload);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CanBusMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autolabor_canbus_driver::CanBusMessage_<ContainerAllocator>& v)
  {
    s << indent << "node_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.node_type);
    s << indent << "node_seq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.node_seq);
    s << indent << "msg_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg_type);
    s << indent << "payload[]" << std::endl;
    for (size_t i = 0; i < v.payload.size(); ++i)
    {
      s << indent << "  payload[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.payload[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOLABOR_CANBUS_DRIVER_MESSAGE_CANBUSMESSAGE_H
