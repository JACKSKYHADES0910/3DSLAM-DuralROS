// Generated by gencpp from file marvelmind/beacon_pos.msg
// DO NOT EDIT!


#ifndef MARVELMIND_MESSAGE_BEACON_POS_H
#define MARVELMIND_MESSAGE_BEACON_POS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marvelmind
{
template <class ContainerAllocator>
struct beacon_pos_
{
  typedef beacon_pos_<ContainerAllocator> Type;

  beacon_pos_()
    : address(0)
    , x_m(0.0)
    , y_m(0.0)
    , z_m(0.0)  {
    }
  beacon_pos_(const ContainerAllocator& _alloc)
    : address(0)
    , x_m(0.0)
    , y_m(0.0)
    , z_m(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _address_type;
  _address_type address;

   typedef double _x_m_type;
  _x_m_type x_m;

   typedef double _y_m_type;
  _y_m_type y_m;

   typedef double _z_m_type;
  _z_m_type z_m;





  typedef boost::shared_ptr< ::marvelmind::beacon_pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marvelmind::beacon_pos_<ContainerAllocator> const> ConstPtr;

}; // struct beacon_pos_

typedef ::marvelmind::beacon_pos_<std::allocator<void> > beacon_pos;

typedef boost::shared_ptr< ::marvelmind::beacon_pos > beacon_posPtr;
typedef boost::shared_ptr< ::marvelmind::beacon_pos const> beacon_posConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marvelmind::beacon_pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marvelmind::beacon_pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marvelmind::beacon_pos_<ContainerAllocator1> & lhs, const ::marvelmind::beacon_pos_<ContainerAllocator2> & rhs)
{
  return lhs.address == rhs.address &&
    lhs.x_m == rhs.x_m &&
    lhs.y_m == rhs.y_m &&
    lhs.z_m == rhs.z_m;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marvelmind::beacon_pos_<ContainerAllocator1> & lhs, const ::marvelmind::beacon_pos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marvelmind

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::marvelmind::beacon_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marvelmind::beacon_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvelmind::beacon_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvelmind::beacon_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvelmind::beacon_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvelmind::beacon_pos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marvelmind::beacon_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ebe9b8512406c92c2dbfed7a627f03c";
  }

  static const char* value(const ::marvelmind::beacon_pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ebe9b8512406c92ULL;
  static const uint64_t static_value2 = 0xc2dbfed7a627f03cULL;
};

template<class ContainerAllocator>
struct DataType< ::marvelmind::beacon_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marvelmind/beacon_pos";
  }

  static const char* value(const ::marvelmind::beacon_pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marvelmind::beacon_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 address\n"
"float64 x_m\n"
"float64 y_m\n"
"float64 z_m\n"
;
  }

  static const char* value(const ::marvelmind::beacon_pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marvelmind::beacon_pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.address);
      stream.next(m.x_m);
      stream.next(m.y_m);
      stream.next(m.z_m);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct beacon_pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marvelmind::beacon_pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marvelmind::beacon_pos_<ContainerAllocator>& v)
  {
    s << indent << "address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.address);
    s << indent << "x_m: ";
    Printer<double>::stream(s, indent + "  ", v.x_m);
    s << indent << "y_m: ";
    Printer<double>::stream(s, indent + "  ", v.y_m);
    s << indent << "z_m: ";
    Printer<double>::stream(s, indent + "  ", v.z_m);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARVELMIND_MESSAGE_BEACON_POS_H
